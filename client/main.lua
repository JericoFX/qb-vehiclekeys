-----------------------
----   Variables   ----
-----------------------
local QBCore = exports['qb-core']:GetCoreObject()
local KeysList = {}

local isTakingKeys = false
local isCarjacking = false
local canCarjack = true
local AlertSend = false
local lastPickedVehicle = nil
local usingAdvanced = false
local IsHotwiring = false

-----------------------
----   Threads     ----
-----------------------
---CHANGE THIS TO A LOW LEVEL GAME EVENT, SIMPLIFY THE STATES

-- Two states:
-- Has key or not, if not have the key run the command to hotwire, else just give the key to
-- Using a combination of CEventNetworkPlayerEnteredVehicle << this one is ONLY when the player is IN the vehicle so doesnt work to check if there is a ped or not, and CEventPlayerUnableToEnterVehicle
-- CEventPedJackingMyVehicle << when you try to enter a vehicle with a ped on it Â¿LockNPCDrivingCars must be false?
-- CEventPlayerUnableToEnterVehicle -- when the vehicle is locked
local function disableState()
lib.disable
end


local eventos = {
    CEventNetworkPlayerEnteredVehicle = function(args)
        local vehicle = args[2]
        local plate = QBCore.Functions.GetPlate(vehicle)
        if HasKeys(plate) then
            SetVehicleEngineOn(vehicle, true, true, true)
        end
    end ,
    CEventPlayerUnableToEnterVehicle =  function(args)
        local vehicle = GetVehiclePedIsTryingToEnter(PlayerPedId())
        local options = {
            {
                name = 'Force Vehicle',
                event = 'asd',
                icon = 'fa-solid fa-road',
                label = 'Option 1',
                canInteract = function(entity, distance, coords, name, bone)
                    return IsEntityAVehicle(entity) and distance <= 1.0
                end
            }
        }
        exports.ox_target:addLocalEntity(vehicle, options)
    end,
    CEventPedJackingMyVehicle = true
}

AddEventHandler("gameEventTriggered", function(name, args)
    if eventos[name] then
        eventos[name].fun(args)
    end
end)

RegisterNetEvent("asd", function(args)
    LockpickDoor(true)
end)

RegisterNetEvent("CEventPlayerUnableToEnterVehicle", function()
    eventos["CEventPlayerUnableToEnterVehicle"].fun()
end)
local events = {
    "ARTFeedbackInterface",
    "ARTFeedbackInterfaceGta",
    "ASFSinkWriterWrapper",
    "AddTargetIterator",
    "Allocator",
    "AllotGameTransactionHttpTask",
    "AllotRecoupTransaction",
    "AmbientModelSetMounter",
    "AudioClipDictionary",
    "AutoIdDesc__",
    "AutoIdDescriptor",
    "AutoIdDescriptor_T",
    "AutoState",
    "AxisDefinition",
    "BGScriptInfo",
    "BackgroundScripts",
    "BaseCS",
    "BaseFilter",
    "BaseModelInfoBoneIndices",
    "BasePlayerCardDataManager",
    "BaseShopItem",
    "BaseShopPedApparel",
    "BaseSocialClubMenu",
    "BindTaskData",
    "BlurCS",
    "BoneModifier",
    "BuildPsoVisitor",
    "BulletApplier",
    "BuyItemGameTransactionHttpTask",
    "BuyPropertyGameTransactionHttpTask",
    "BuyVehicleGameTransactionHttpTask",
    "CAICurvePoint",
    "CAIHandlingInfo",
    "CAIHandlingInfoMgr",
    "CActionDefinition",
    "CActionInfoDataFileMounter",
    "CActionResult",
    "CActivePlayerCardDataManager",
    "CAdminInvite",
    "CAgitatedAction",
    "CAgitatedActionAnger",
    "CAgitatedActionApplyAgitation",
    "CAgitatedActionCallPolice",
    "CAgitatedActionChangeResponse",
    "CAgitatedActionClearHash",
    "CAgitatedActionConditional",
    "CAgitatedActionConfront",
    "CAgitatedActionEnterVehicle",
    "CAgitatedActionExitVehicle",
    "CAgitatedActionFace",
    "CAgitatedActionFear",
    "CAgitatedActionFight",
    "CAgitatedActionFlee",
    "CAgitatedActionFlipOff",
    "CAgitatedActionFollow",
    "CAgitatedActionHurryAway",
    "CAgitatedActionIgnoreForcedAudioFailures",
    "CAgitatedActionMakeAggressiveDriver",
    "CAgitatedActionMulti",
    "CAgitatedActionReportCrime",
    "CAgitatedActionReset",
    "CAgitatedActionSay",
    "CAgitatedActionSayAgitator",
    "CAgitatedActionSetFleeAmbientClips",
    "CAgitatedActionSetFleeMoveBlendRatio",
    "CAgitatedActionSetHash",
    "CAgitatedActionStopVehicle",
    "CAgitatedActionTurnOnSiren",
    "CAgitatedCondition",
    "CAgitatedConditionAnd",
    "CAgitatedConditionCanCallPolice",
    "CAgitatedConditionCanFight",
    "CAgitatedConditionCanHurryAway",
    "CAgitatedConditionCanStepOutOfVehicle",
    "CAgitatedConditionCanWalkAway",
    "CAgitatedConditionCheckBraveryFlags",
    "CAgitatedConditionHasBeenHostileFor",
    "CAgitatedConditionHasContext",
    "CAgitatedConditionHasFriendsNearby",
    "CAgitatedConditionHasLeader",
    "CAgitatedConditionHasLeaderBeenFightingFor",
    "CAgitatedConditionHasPavement",
    "CAgitatedConditionHasVehicle",
    "CAgitatedConditionIntruderLeft",
    "CAgitatedConditionIsAGunPulled",
    "CAgitatedConditionIsAgitatorArmed",
    "CAgitatedConditionIsAgitatorEnteringVehicle",
    "CAgitatedConditionIsAgitatorInOurTerritory",
    "CAgitatedConditionIsAgitatorInVehicle",
    "CAgitatedConditionIsAgitatorInjured",
    "CAgitatedConditionIsAgitatorMovingAway",
    "CAgitatedConditionIsAngry",
    "CAgitatedConditionIsArgumentative",
    "CAgitatedConditionIsAvoiding",
    "CAgitatedConditionIsBecomingArmed",
    "CAgitatedConditionIsBumped",
    "CAgitatedConditionIsBumpedByVehicle",
    "CAgitatedConditionIsBumpedInVehicle",
    "CAgitatedConditionIsCallingPolice",
    "CAgitatedConditionIsConfrontational",
    "CAgitatedConditionIsConfronting",
    "CAgitatedConditionIsContext",
    "CAgitatedConditionIsDodged",
    "CAgitatedConditionIsDodgedVehicle",
    "CAgitatedConditionIsDrivingVehicle",
    "CAgitatedConditionIsExitingScenario",
    "CAgitatedConditionIsFacing",
    "CAgitatedConditionIsFearful",
    "CAgitatedConditionIsFighting",
    "CAgitatedConditionIsFleeing",
    "CAgitatedConditionIsFlippingOff",
    "CAgitatedConditionIsFollowing",
    "CAgitatedConditionIsFriendlyTalking",
    "CAgitatedConditionIsGettingUp",
    "CAgitatedConditionIsGriefing",
    "CAgitatedConditionIsGunAimedAt",
    "CAgitatedConditionIsHarassed",
    "CAgitatedConditionIsHash",
    "CAgitatedConditionIsHostile",
    "CAgitatedConditionIsHurryingAway",
    "CAgitatedConditionIsInVehicle",
    "CAgitatedConditionIsInjured",
    "CAgitatedConditionIsInsulted",
    "CAgitatedConditionIsIntervene",
    "CAgitatedConditionIsIntimidate",
    "CAgitatedConditionIsLastAgitationApplied",
    "CAgitatedConditionIsLawEnforcement",
    "CAgitatedConditionIsLeaderAgitated",
    "CAgitatedConditionIsLeaderFighting",
    "CAgitatedConditionIsLeaderInState",
    "CAgitatedConditionIsLeaderStill",
    "CAgitatedConditionIsLeaderTalking",
    "CAgitatedConditionIsLeaderUsingResponse",
    "CAgitatedConditionIsLoitering",
    "CAgitatedConditionIsMale",
    "CAgitatedConditionIsOutsideClosestDistance",
    "CAgitatedConditionIsOutsideDistance",
    "CAgitatedConditionIsPlayingAmbientsInScenario",
    "CAgitatedConditionIsProvoked",
    "CAgitatedConditionIsRanting",
    "CAgitatedConditionIsReadyForScenarioResponse",
    "CAgitatedConditionIsSirenOn",
    "CAgitatedConditionIsStanding",
    "CAgitatedConditionIsSwimming",
    "CAgitatedConditionIsTalking",
    "CAgitatedConditionIsTargetDoingAMeleeMove",
    "CAgitatedConditionIsTerritoryIntruded",
    "CAgitatedConditionIsUsingRagdoll",
    "CAgitatedConditionIsUsingScenario",
    "CAgitatedConditionIsUsingTerritoryScenario",
    "CAgitatedConditionIsWandering",
    "CAgitatedConditionMulti",
    "CAgitatedConditionNot",
    "CAgitatedConditionOr",
    "CAgitatedConditionRandom",
    "CAgitatedConditionTimeout",
    "CAgitatedConditionWasLeaderHit",
    "CAgitatedConditionWasRecentlyBumpedWhenStill",
    "CAgitatedConditionWasUsingTerritorialScenario",
    "CAgitatedManager",
    "CAgitatedScenarioExit",
    "CAgitatedScenarioFastCowardExit",
    "CAgitatedScenarioFleeExit",
    "CAgitatedScenarioNormalCowardExit",
    "CAgitatedSetWaterSurvivalTime",
    "CAircraftDamage",
    "CAircraftDamageBase",
    "CAlterWantedLevelEvent",
    "CAmbientAudioManager",
    "CAmbientModelSet",
    "CAmbientModelSetFilter",
    "CAmbientModelSetFilterForScenario",
    "CAmbientModelVariations",
    "CAmbulanceDepartmentDispatch",
    "CAmbulanceOrder",
    "CAmmoInfo",
    "CAmmoProjectileInfo",
    "CAmmoRocketInfo",
    "CAmmoThrownInfo",
    "CAnimRequestArrayHandler",
    "CAnimScene",
    "CAnimSceneBoolean",
    "CAnimSceneCamera",
    "CAnimSceneClip",
    "CAnimSceneClipSet",
    "CAnimSceneCreateObjectEvent",
    "CAnimSceneCreatePedEvent",
    "CAnimSceneCreateVehicleEvent",
    "CAnimSceneDictionary",
    "CAnimSceneEntity",
    "CAnimSceneEntityHandle",
    "CAnimSceneEvent",
    "CAnimSceneEventList",
    "CAnimSceneForceMotionStateEvent",
    "CAnimSceneHelperBase",
    "CAnimSceneInternalLoopEvent",
    "CAnimSceneLeadInData",
    "CAnimSceneManager",
    "CAnimSceneMatrix",
    "CAnimSceneObject",
    "CAnimScenePed",
    "CAnimScenePlayAnimEvent",
    "CAnimScenePlayCameraAnimEvent",
    "CAnimScenePlaySceneEvent",
    "CAnimScenePlayVfxEvent",
    "CAnimScenePlaybackList",
    "CAnimSceneSection",
    "CAnimSceneVehicle",
    "CAnimatedBuilding",
    "CApp",
    "CAppDataRequest",
    "CApplyDamage",
    "CArea",
    "CArmIkSolver",
    "CArmyVehicleDispatch",
    "CArrestIncident",
    "CArrowData",
    "CAudioAttr",
    "CAudioBankRequestEvent",
    "CAudioCollisionInfo",
    "CAudioRequest",
    "CAudioSettings",
    "CAutogyro",
    "CAutomobile",
    "CAutomobileCreationDataNode",
    "CAutomobileSyncTree",
    "CAutomobileSyncTreeBase",
    "CBUTaskBase",
    "CBaseArchetypeDef",
    "CBaseCapsuleInfo",
    "CBaseElementLocation",
    "CBaseElementLocationsMap",
    "CBaseElements",
    "CBaseIkManager",
    "CBaseModelInfo",
    "CBaseStatsSaveStructure",
    "CBaseSubHandlingData",
    "CBasicEntityInteriorPrototype",
    "CBasicEntityPrototype",
    "CBasicEntityReflectionPrototype",
    "CBike",
    "CBikeGameStateDataNode",
    "CBikeHandlingData",
    "CBikeLeanAngleHelper",
    "CBikeSyncTree",
    "CBipedCapsuleInfo",
    "CBirdCapsuleInfo",
    "CBlimp",
    "CBlockingOfNonTemporaryEventsParameters",
    "CBlowUpVehicleEvent",
    "CBmx",
    "CBoat",
    "CBoatChaseDirector",
    "CBoatGameStateDataNode",
    "CBoatHandlingData",
    "CBoatSyncTree",
    "CBodyLookIkSolver",
    "CBodyLookIkSolverProxy",
    "CBodyRecoilIkSolver",
    "CBountyPresenceEvent",
    "CBrawlingStyleMetaDataFileMounter",
    "CBrokenAndHiddenComponentFlagsExtension",
    "CBufferInfo",
    "CBuilding",
    "CBuoyancyAttr",
    "CCSMEntityTracker",
    "CCachePlayerHeadBlendDataEvent",
    "CCamInterp",
    "CCarGen",
    "CCarHandlingData",
    "CCarHornEvent",
    "CChangeRadioStationEvent",
    "CClanPlayerCardDataManager",
    "CClearAreaEvent",
    "CClearAreaRequest",
    "CClearPedTasksEvent",
    "CClip",
    "CClipDictionaryStoreInterface",
    "CClipPoseHelper",
    "CClonedAchieveHeadingInfo",
    "CClonedAimAndThrowProjectileInfo",
    "CClonedAimGunBlindFireInfo",
    "CClonedAimGunOnFootInfo",
    "CClonedAimGunScriptedInfo",
    "CClonedAimGunVehicleDriveByInfo",
    "CClonedAmbulancePatrolInfo",
    "CClonedAnimatedAttachInfo",
    "CClonedBombInfo",
    "CClonedClearLookAtInfo",
    "CClonedClimbLadderInfo",
    "CClonedCombatClosestTargetInAreaInfo",
    "CClonedCombatTaskInfo",
    "CClonedComplexEvasiveStepInfo",
    "CClonedControlTaskEscapeBlastInfo",
    "CClonedControlTaskFlyAwayInfo",
    "CClonedControlTaskScenarioFleeInfo",
    "CClonedControlTaskSmartFleeInfo",
    "CClonedControlTaskVehicleMountedWeaponInfo",
    "CClonedControlVehicleInfo",
    "CClonedCoverInfo",
    "CClonedCoverIntroInfo",
    "CClonedCowerInfo",
    "CClonedCrawlInfo",
    "CClonedCrouchInfo",
    "CClonedDamageElectricInfo",
    "CClonedDiveToGroundInfo",
    "CClonedDoNothingInfo",
    "CClonedDriveCarWanderInfo",
    "CClonedDyingDeadInfo",
    "CClonedFallAndGetUpInfo",
    "CClonedFallInfo",
    "CClonedFallOverInfo",
    "CClonedForceMotionStateInfo",
    "CClonedGeneralSweepInfo",
    "CClonedGetUpInfo",
    "CClonedGoToPointAimingInfo",
    "CClonedGoToPointAndStandStillTimedInfo",
    "CClonedGoToPointAnyMeansInfo",
    "CClonedGunInfo",
    "CClonedHandsUpInfo",
    "CClonedHeliPassengerRappelInfo",
    "CClonedLeaveAnyCarInfo",
    "CClonedLookAtInfo",
    "CClonedMotionInCoverInfo",
    "CClonedMountThrowProjectileInfo",
    "CClonedMoveFollowNavMeshInfo",
    "CClonedNMBalanceInfo",
    "CClonedNMBraceInfo",
    "CClonedNMBuoyancyInfo",
    "CClonedNMControlInfo",
    "CClonedNMElectrocuteInfo",
    "CClonedNMExposionInfo",
    "CClonedNMFallDownInfo",
    "CClonedNMFlinchInfo",
    "CClonedNMHighFallInfo",
    "CClonedNMInjuredOnGroundInfo",
    "CClonedNMJumpRollInfo",
    "CClonedNMOnFireInfo",
    "CClonedNMPoseInfo",
    "CClonedNMPrototypeInfo",
    "CClonedNMRelaxInfo",
    "CClonedNMRiverRapidsInfo",
    "CClonedNMShotInfo",
    "CClonedNMSimpleInfo",
    "CClonedNMSitInfo",
    "CClonedNMThroughWindscreenInfo",
    "CClonedParachuteInfo",
    "CClonedParachuteObjectInfo",
    "CClonedPauseInfo",
    "CClonedPlaneChaseInfo",
    "CClonedRageRagdollInfo",
    "CClonedRappelDownWallInfo",
    "CClonedReactAimWeaponInfo",
    "CClonedReactAndFleeInfo",
    "CClonedReactToExplosionInfo",
    "CClonedReviveInfo",
    "CClonedScriptClipInfo",
    "CClonedScriptedAnimationInfo",
    "CClonedSeatShuffleInfo",
    "CClonedSeekEntityAimingInfo",
    "CClonedSeekEntityInfoBase",
    "CClonedSeekEntityLastNavMeshIntersectionInfo",
    "CClonedSeekEntityOffsetFixedInfo",
    "CClonedSeekEntityOffsetRotateInfo",
    "CClonedSeekEntityRadiusAngleInfo",
    "CClonedSeekEntityStandardInfo",
    "CClonedSetAndGuardAreaInfo",
    "CClonedSetBlockingOfNonTemporaryEventsInfo",
    "CClonedSetPedDefensiveAreaInfo",
    "CClonedSlideToCoordInfo",
    "CClonedSlopeScrambleInfo",
    "CClonedStandGuardInfo",
    "CClonedStayInCoverInfo",
    "CClonedSwapWeaponInfo",
    "CClonedSynchronisedSceneInfo",
    "CClonedTaskAmbientClipsInfo",
    "CClonedTaskArrestPed2Info",
    "CClonedTaskDropDownInfo",
    "CClonedTaskJumpInfo",
    "CClonedTaskMeleeInfo",
    "CClonedTaskMeleeResultInfo",
    "CClonedTaskMoVEScriptedInfo",
    "CClonedTaskReloadGunInfo",
    "CClonedTaskSequenceInfo",
    "CClonedTaskSharkAttackInfo",
    "CClonedTaskUnalertedInfo",
    "CClonedTaskVaultInfo",
    "CClonedThreatResponseInfo",
    "CClonedThrowProjectileInfo",
    "CClonedTurnToFaceEntityOrCoordInfo",
    "CClonedUseCoverInfo",
    "CClonedVehicleGunInfo",
    "CClonedVehicleProjectileInfo",
    "CClonedWanderInfo",
    "CClonedWeaponBlockedInfo",
    "CClonedWritheInfo",
    "CClosestPositionRequest",
    "CCombatDirector",
    "CCombatInfoDataFileMounter",
    "CCombatSituation",
    "CCombatSituationEscalate",
    "CCombatSituationFallBack",
    "CCombatSituationLull",
    "CCombatSituationNormal",
    "CCompEntity",
    "CCompEntityModelInfo",
    "CCompositeEntityAnimation",
    "CCompositeEntityArchetypeDef",
    "CCompositeEntityEffectsSetting",
    "CCompressFileForSendingJob",
    "CCompressedPedDamageSet",
    "CConditionalAnimManager",
    "CContextMenu",
    "CControl",
    "CConvertToScriptEntityEvent",
    "CConvertibleRoofWindowInfo",
    "CCoronaCrewsInviteMenu",
    "CCoronaFriendsInviteMenu",
    "CCoronaJoinedPlayersMenu",
    "CCoronaLastJobInviteMenu",
    "CCoronaMatchedPlayersInviteMenu",
    "CCoronaPlayersInviteMenu",
    "CCoverFinder",
    "CCoverFinderFSM",
    "CCoverPointFilterBase",
    "CCoverPointFilterDefensiveArea",
    "CCoverPointFilterTaskCombat",
    "CCoverPointStatusHelper",
    "CCreatureMetaData",
    "CCrewDetailMenu",
    "CCrewMenu",
    "CCrimeInfoManager",
    "CCrimeInformationManager",
    "CCullVolumeBoxDesc",
    "CCullVolumeCapsuleDesc",
    "CCullVolumeDesc",
    "CCurve",
    "CCurveSet",
    "CCustomShaderEffectAnimUV",
    "CCustomShaderEffectAnimUVType",
    "CCustomShaderEffectCable",
    "CCustomShaderEffectCableType",
    "CCustomShaderEffectGrass",
    "CCustomShaderEffectGrassType",
    "CCustomShaderEffectInterior",
    "CCustomShaderEffectInteriorType",
    "CCustomShaderEffectMirror",
    "CCustomShaderEffectMirrorType",
    "CCustomShaderEffectPed",
    "CCustomShaderEffectPedType",
    "CCustomShaderEffectProp",
    "CCustomShaderEffectPropType",
    "CCustomShaderEffectTint",
    "CCustomShaderEffectTintType",
    "CCustomShaderEffectTree",
    "CCustomShaderEffectTreeType",
    "CCustomShaderEffectVehicle",
    "CCustomShaderEffectVehicleType",
    "CCustomShaderEffectWeapon",
    "CCustomShaderEffectWeaponType",
    "CCutSceneAnimMgrEntity",
    "CCutSceneAnimatedParticleEffect",
    "CCutSceneAnimatedPropEntity",
    "CCutSceneAnimatedWeaponEntity",
    "CCutSceneAssetMgrEntity",
    "CCutSceneAudioEntity",
    "CCutSceneBinkOverlayEntity",
    "CCutSceneBlockingBoundsEntity",
    "CCutSceneCameraEntity",
    "CCutSceneDecalEntity",
    "CCutSceneFadeEntity",
    "CCutSceneFixupBoundsEntity",
    "CCutSceneHiddenBoundsEntity",
    "CCutSceneLightEntity",
    "CCutSceneParticleEffect",
    "CCutSceneParticleEffectsEntity",
    "CCutSceneRayFireEntity",
    "CCutSceneScaleformOverlayEntity",
    "CCutSceneSingleRequestStreamingInfo",
    "CCutSceneStreamingInfo",
    "CCutSceneSubtitleEntity",
    "CCutSceneTriggeredParticleEffect",
    "CCutsceneAnimatedActorEntity",
    "CCutsceneAnimatedModelEntity",
    "CCutsceneAnimatedVehicleEntity",
    "CCutsceneMenu",
    "CCutsceneModelRequestStreamingInfo",
    "CCutsceneStore",
    "CCutsceneVariationStreamingInfo",
    "CDLCItypFileMounter",
    "CDLCScriptDataMounter",
    "CDataFileMountInterface",
    "CDecalAttr",
    "CDecalCallbacks",
    "CDecodeTextureFromBlobWorkJob",
    "CDecoratorInterface",
    "CDefensiveArea",
    "CDispatchAdvancedSpawnHelper",
    "CDispatchBasicSpawnHelper",
    "CDispatchService",
    "CDispatchSpawnHelper",
    "CDisplayTextBaseClass",
    "CDisplayTextFourSubstringsThreeNumbers",
    "CDisplayTextOneSubstring",
    "CDisplayTextZeroOrOneNumbers",
    "CDistantLODLight",
    "CDoor",
    "CDoorBreakEvent",
    "CDoorCreationDataNode",
    "CDoorExtension",
    "CDoorMovementDataNode",
    "CDoorScanner",
    "CDoorScriptGameStateDataNode",
    "CDoorScriptInfoDataNode",
    "CDoorSyncData",
    "CDoorSyncTree",
    "CDoorSystemData",
    "CDownloadableTextureManager",
    "CDrawCommandBuffer",
    "CDrawListMgr",
    "CDummyObject",
    "CDynamicCoverHelper",
    "CDynamicEntity",
    "CDynamicEntityFragmentDrawHandler",
    "CDynamicEntityGameStateDataNode",
    "CDynamicEntitySkinnedDrawHandler",
    "CDynamicEntitySyncTreeBase",
    "CEntity",
    "CEntityAreaStatusEvent",
    "CEntityBasicDrawHandler",
    "CEntityBatch",
    "CEntityBatchBase",
    "CEntityBatchDrawHandler",
    "CEntityBendableDrawHandler",
    "CEntityDef",
    "CEntityDrawDataPedProps",
    "CEntityDrawDataPedPropsBase",
    "CEntityDrawHandler",
    "CEntityFragDrawHandler",
    "CEntityInstancedBasicDrawHandler",
    "CEntityInstancedBendableDrawHandler",
    "CEntityInstancedFragDrawHandler",
    "CEntityOrientationDataNode",
    "CEntityScanner",
    "CEntityScriptGameStateDataNode",
    "CEntityScriptInfoDataNode",
    "CEntitySeekPosCalculator",
    "CEntitySeekPosCalculatorLastNavMeshIntersection",
    "CEntitySeekPosCalculatorRadiusAngleOffset",
    "CEntitySeekPosCalculatorStandard",
    "CEntitySeekPosCalculatorXYOffsetFixed",
    "CEntitySeekPosCalculatorXYOffsetRotated",
    "CEntitySyncTreeBase",
    "CEvent",
    "CEventAcquaintancePed",
    "CEventAcquaintancePedDead",
    "CEventAcquaintancePedDislike",
    "CEventAcquaintancePedHate",
    "CEventAcquaintancePedLike",
    "CEventAcquaintancePedWanted",
    "CEventAgitated",
    "CEventAgitatedAction",
    "CEventCallForCover",
    "CEventCarUndriveable",
    "CEventClimbLadderOnRoute",
    "CEventClimbNavMeshOnRoute",
    "CEventCombatTaunt",
    "CEventCommunicateEvent",
    "CEventCopCarBeingStolen",
    "CEventCrimeCryForHelp",
    "CEventCrimeReported",
    "CEventDamage",
    "CEventDataDecisionMaker",
    "CEventDataFileMounter",
    "CEventDataResponseAggressiveRubberneck",
    "CEventDataResponseDeferToScenarioPointFlags",
    "CEventDataResponseFriendlyAimedAt",
    "CEventDataResponseFriendlyNearMiss",
    "CEventDataResponsePlayerDeath",
    "CEventDataResponsePoliceTaskWanted",
    "CEventDataResponseSwatTaskWanted",
    "CEventDataResponseTask",
    "CEventDataResponseTaskAgitated",
    "CEventDataResponseTaskCombat",
    "CEventDataResponseTaskCower",
    "CEventDataResponseTaskCrouch",
    "CEventDataResponseTaskDuckAndCover",
    "CEventDataResponseTaskEscapeBlast",
    "CEventDataResponseTaskEvasiveStep",
    "CEventDataResponseTaskExhaustedFlee",
    "CEventDataResponseTaskExplosion",
    "CEventDataResponseTaskFlee",
    "CEventDataResponseTaskFlyAway",
    "CEventDataResponseTaskGrowlAndFlee",
    "CEventDataResponseTaskGunAimedAt",
    "CEventDataResponseTaskHandsUp",
    "CEventDataResponseTaskHeadTrack",
    "CEventDataResponseTaskLeaveCarAndFlee",
    "CEventDataResponseTaskScenarioFlee",
    "CEventDataResponseTaskSharkAttack",
    "CEventDataResponseTaskThreat",
    "CEventDataResponseTaskTurnToFace",
    "CEventDataResponseTaskWalkAway",
    "CEventDataResponseTaskWalkRoundEntity",
    "CEventDataResponseTaskWalkRoundFire",
    "CEventDeadPedFound",
    "CEventDeath",
    "CEventDecisionMakerResponse",
    "CEventDisturbance",
    "CEventDraggedOutCar",
    "CEventEditableResponse",
    "CEventEncroachingPed",
    "CEventEntityDamaged",
    "CEventEntityDestroyed",
    "CEventExplosion",
    "CEventExplosionHeard",
    "CEventFriendlyAimedAt",
    "CEventFriendlyFireNearMiss",
    "CEventGetOutOfWater",
    "CEventGivePedTask",
    "CEventGroupScriptAI",
    "CEventGroupScriptNetwork",
    "CEventGunAimedAt",
    "CEventGunShot",
    "CEventGunShotBulletImpact",
    "CEventGunShotWhizzedBy",
    "CEventHelpAmbientFriend",
    "CEventHurtTransition",
    "CEventInAir",
    "CEventInfo",
    "CEventInfoBase",
    "CEventInjuredCryForHelp",
    "CEventLeaderEnteredCarAsDriver",
    "CEventLeaderExitedCarAsDriver",
    "CEventLeaderHolsteredWeapon",
    "CEventLeaderLeftCover",
    "CEventLeaderUnholsteredWeapon",
    "CEventMeleeAction",
    "CEventMustLeaveBoat",
    "CEventNetworkAdminInvited",
    "CEventNetworkAttemptHostMigration",
    "CEventNetworkBail",
    "CEventNetworkCashTransactionLog",
    "CEventNetworkCheatTriggered",
    "CEventNetworkClanInviteReceived",
    "CEventNetworkClanJoined",
    "CEventNetworkClanKicked",
    "CEventNetworkClanLeft",
    "CEventNetworkClanRankChanged",
    "CEventNetworkCloudEvent",
    "CEventNetworkCloudFileResponse",
    "CEventNetworkEmailReceivedEvent",
    "CEventNetworkEndMatch",
    "CEventNetworkEndSession",
    "CEventNetworkEntityDamage",
    "CEventNetworkFindSession",
    "CEventNetworkFollowInviteReceived",
    "CEventNetworkHostMigration",
    "CEventNetworkHostSession",
    "CEventNetworkIncrementStat",
    "CEventNetworkInviteAccepted",
    "CEventNetworkInviteConfirmed",
    "CEventNetworkInviteRejected",
    "CEventNetworkJoinSession",
    "CEventNetworkJoinSessionResponse",
    "CEventNetworkOnlinePermissionsUpdated",
    "CEventNetworkPedLeftBehind",
    "CEventNetworkPickupRespawned",
    "CEventNetworkPlayerArrest",
    "CEventNetworkPlayerCollectedAmbientPickup",
    "CEventNetworkPlayerCollectedPickup",
    "CEventNetworkPlayerCollectedPortablePickup",
    "CEventNetworkPlayerDroppedPortablePickup",
    "CEventNetworkPlayerJoinScript",
    "CEventNetworkPlayerLeftScript",
    "CEventNetworkPlayerScript",
    "CEventNetworkPlayerSession",
    "CEventNetworkPlayerSpawn",
    "CEventNetworkPresenceInvite",
    "CEventNetworkPresenceInviteRemoved",
    "CEventNetworkPresenceInviteReply",
    "CEventNetworkPresenceTriggerEvent",
    "CEventNetworkPresence_StatUpdate",
    "CEventNetworkPrimaryClanChanged",
    "CEventNetworkRequestDelay",
    "CEventNetworkRosChanged",
    "CEventNetworkScAdminPlayerUpdated",
    "CEventNetworkScAdminReceivedCash",
    "CEventNetworkScriptEvent",
    "CEventNetworkSessionEvent",
    "CEventNetworkShopTransaction",
    "CEventNetworkSignInStateChanged",
    "CEventNetworkSocialClubAccountLinked",
    "CEventNetworkSpectateLocal",
    "CEventNetworkStartMatch",
    "CEventNetworkStartSession",
    "CEventNetworkStorePlayerLeft",
    "CEventNetworkSummon",
    "CEventNetworkSystemServiceEvent",
    "CEventNetworkTextMessageReceived",
    "CEventNetworkTimedExplosion",
    "CEventNetworkTransitionEvent",
    "CEventNetworkTransitionGamerInstruction",
    "CEventNetworkTransitionMemberJoined",
    "CEventNetworkTransitionMemberLeft",
    "CEventNetworkTransitionParameterChanged",
    "CEventNetworkTransitionStarted",
    "CEventNetworkTransitionStringChanged",
    "CEventNetworkVehicleUndrivable",
    "CEventNetworkVoiceConnectionRequested",
    "CEventNetworkVoiceConnectionResponse",
    "CEventNetworkVoiceConnectionTerminated",
    "CEventNetworkVoiceSessionEnded",
    "CEventNetworkVoiceSessionStarted",
    "CEventNetworkWithData",
    "CEventNetwork_InboxMsgReceived",
    "CEventNewTask",
    "CEventObjectCollision",
    "CEventOnFire",
    "CEventOpenDoor",
    "CEventPedCollisionWithPed",
    "CEventPedCollisionWithPlayer",
    "CEventPedEnteredMyVehicle",
    "CEventPedJackingMyVehicle",
    "CEventPedOnCarRoof",
    "CEventPedSeenDeadPed",
    "CEventPlayerCollisionWithPed",
    "CEventPlayerDeath",
    "CEventPlayerUnableToEnterVehicle",
    "CEventPotentialBeWalkedInto",
    "CEventPotentialBlast",
    "CEventPotentialGetRunOver",
    "CEventPotentialWalkIntoVehicle",
    "CEventProvidingCover",
    "CEventRanOverPed",
    "CEventReactionEnemyPed",
    "CEventReactionInvestigateDeadPed",
    "CEventReactionInvestigateThreat",
    "CEventRequestHelp",
    "CEventRequestHelpWithConfrontation",
    "CEventRespondedToThreat",
    "CEventScanner",
    "CEventScenarioForceAction",
    "CEventScriptCommand",
    "CEventScriptWithData",
    "CEventShoutBlockingLos",
    "CEventShoutTargetPosition",
    "CEventShovePed",
    "CEventSoundBase",
    "CEventStatChangedValue",
    "CEventStaticCountReachedMax",
    "CEventStuckInAir",
    "CEventSwitch2NM",
    "CEventUnidentifiedPed",
    "CEventVehicleCollision",
    "CEventVehicleDamage",
    "CEventVehicleDamageWeapon",
    "CEventVehicleOnFire",
    "CEventWrithe",
    "CExplosionAttr",
    "CExplosionEvent",
    "CExplosionFileMounter",
    "CExpressionExtension",
    "CExtensionDef",
    "CExtensionDefAudioCollisionSettings",
    "CExtensionDefAudioEmitter",
    "CExtensionDefBuoyancy",
    "CExtensionDefClimbHandHold",
    "CExtensionDefDecal",
    "CExtensionDefDoor",
    "CExtensionDefExplosionEffect",
    "CExtensionDefExpression",
    "CExtensionDefLadder",
    "CExtensionDefLight",
    "CExtensionDefLightEffect",
    "CExtensionDefLightShaft",
    "CExtensionDefParticleEffect",
    "CExtensionDefProcObject",
    "CExtensionDefScript",
    "CExtensionDefScriptChild",
    "CExtensionDefScrollbars",
    "CExtensionDefSpawnPoint",
    "CExtensionDefSpawnPointOverride",
    "CExtensionDefSwayableEffect",
    "CExtensionDefWalkDontWalk",
    "CExtensionDefWindDisturbance",
    "CExtraContentFileMounter",
    "CExtraContentManager",
    "CExtraMetaDataFileMounter",
    "CFacebook",
    "CFileDataProvider",
    "CFileViewFilter",
    "CFindNearestCarNodeHelper",
    "CFingerOfGodPresenceEvent",
    "CFireDepartmentDispatch",
    "CFireEvent",
    "CFireIncident",
    "CFireOrder",
    "CFiringPatternInfo",
    "CFishCapsuleInfo",
    "CFixedVehicleWeapon",
    "CFleeInVehicleTransitions",
    "CFleeSkiingTransitions",
    "CFloodFillRequest",
    "CFlyingHandlingData",
    "CFollowInvite",
    "CForceSessionUpdatePresenceEvent",
    "CFriendClanData",
    "CFriendCrewCreatedPresenceEvent",
    "CFriendCrewJoinedPresenceEvent",
    "CFriendListMenuDataPaginator",
    "CFriendPlayerCardDataManager",
    "CFriendsMenuMP",
    "CFriendsMenuSP",
    "CGTABoxStreamerInterfaceNew",
    "CGTAStaticBoundsStoreInterface",
    "CGadgetParachute",
    "CGadgetSkis",
    "CGalleryMenu",
    "CGameArrayMgr",
    "CGameAwardPresenceEvent",
    "CGameClockEvent",
    "CGameConfig",
    "CGameHostBroadcastDataHandler",
    "CGameInvite",
    "CGameInviteCancel",
    "CGameInviteReply",
    "CGamePlayerBroadcastDataHandler_Local",
    "CGamePlayerBroadcastDataHandler_Remote",
    "CGameScriptHandler",
    "CGameScriptHandlerMgr",
    "CGameScriptHandlerNetComponent",
    "CGameScriptHandlerNetwork",
    "CGameScriptId",
    "CGameScriptObjInfo",
    "CGameTempAllocator",
    "CGameTriggerEvent",
    "CGameWeatherEvent",
    "CGangDispatch",
    "CGangOrder",
    "CGarageOccupiedStatusEvent",
    "CGestureManager",
    "CGetupProbeHelper",
    "CGiveControlEvent",
    "CGivePedScriptedTaskEvent",
    "CGivePedSequenceTaskEvent",
    "CGivePickupRewardsEvent",
    "CGiveWeaponEvent",
    "CGlobalFlagsDataNode",
    "CGradient",
    "CGraphicsSettings",
    "CGrassBatch",
    "CGrassBatchDrawHandler",
    "CGridRequest",
    "CGroup",
    "CGroupClanData",
    "CGtaAnimManager",
    "CGtaGameInterface",
    "CGtaRenderThreadGameInterface",
    "CGtaSceneInterface",
    "CGtaStreamingInterface",
    "CHandlingData",
    "CHandlingObject",
    "CHeli",
    "CHeliControlDataNode",
    "CHeliHealthDataNode",
    "CHeliIntelligence",
    "CHeliSyncTree",
    "CHudTunablesListener",
    "CIkManager",
    "CIkSolverProxy",
    "CImposedImageHandler",
    "CIncident",
    "CIncidentEntityEvent",
    "CIncidentsArrayHandler",
    "CInfoMenu",
    "CInformFriendsEvent",
    "CInformGroupEvent",
    "CInformSilencedGunShotEvent",
    "CInjuryIncident",
    "CInteriorAudioSettings",
    "CInteriorInst",
    "CInteriorProxy",
    "CInteriorProxyFileMounter",
    "CInterpEventInfo",
    "CInterpolator",
    "CInventoryListener",
    "CIplCullboxFileMounter",
    "CIsVisibleExtension",
    "CItemInfo",
    "CItemSet",
    "CJoinQueueRequest",
    "CJoinQueueUpdate",
    "CKeyMappingMenu",
    "CLODLight",
    "CLadderInfo",
    "CLadderMetadata",
    "CLandingGearDamage",
    "CLandingGearPartBase",
    "CLandingGearPartPhysical",
    "CLandingGearPartPhysicalRot",
    "CLayoutNode",
    "CLegIkSolver",
    "CLegIkSolverProxy",
    "CLevelData",
    "CLightAttr",
    "CLightAttrDef",
    "CLightEntity",
    "CLightExtension",
    "CLightShaftAttr",
    "CLineOfSightRequest",
    "CLoadOutItem",
    "CLoadOutRandom",
    "CLoadOutWeapon",
    "CLobbyMenu",
    "CMPApparelData",
    "CMPFriendPlayerCardDataManager",
    "CMPOutfits",
    "CMPOutfitsData",
    "CMPOutfitsMap",
    "CMPPlayerListMenu",
    "CMapData",
    "CMapDataContents",
    "CMapMenu",
    "CMapTypes",
    "CMapTypesContents",
    "CMarkAsNoLongerNeededEvent",
    "CMenuBase",
    "CMigrationDataNode",
    "CMiloInterior",
    "CMiloRoom",
    "CMipSwitcher",
    "CMissionVerifiedPresenceEvent",
    "CMloArchetypeDef",
    "CMloEntitySet",
    "CMloInstanceDef",
    "CMloModelInfo",
    "CMloPortalDef",
    "CMloRoomDef",
    "CMloTimeCycleModifier",
    "CModelInfoStreamingModule",
    "CModifyVehicleLockWorldStateDataEvent",
    "CMontageElementHandleBase",
    "CMoveAnimatedBuilding",
    "CMoveAnimatedBuildingPooledObject",
    "CMoveObject",
    "CMoveObjectPooledObject",
    "CMovePed",
    "CMovePedPooledObject",
    "CMoveVehicle",
    "CMoveVehiclePooledObject",
    "CMultiTxdRelationship",
    "CMultiplayerStatsSaveStructure",
    "CMusicClipHandle",
    "CNavMesh",
    "CNetBlenderBoat",
    "CNetBlenderHeli",
    "CNetBlenderPed",
    "CNetBlenderPhysical",
    "CNetBlenderTrain",
    "CNetBlenderVehicle",
    "CNetGamePlayer",
    "CNetGamePlayerDataMsg",
    "CNetShopTransaction",
    "CNetShopTransactionBase",
    "CNetShopTransactionBasket",
    "CNetworkBandwidthManager",
    "CNetworkCarGenWorldStateData",
    "CNetworkCheckExeSizeEvent",
    "CNetworkCrcHashCheckEvent",
    "CNetworkCrewDataMgr",
    "CNetworkEntityAreaWorldStateData",
    "CNetworkIncrementStatEvent",
    "CNetworkInfoChangeEvent",
    "CNetworkLeaderboardMgr",
    "CNetworkLogFileAccess",
    "CNetworkNewsStoryMgr",
    "CNetworkObjectMgr",
    "CNetworkPedSeenDeadPedEvent",
    "CNetworkPlayerMgr",
    "CNetworkPopGroupOverrideWorldStateData",
    "CNetworkPopMultiplierAreaWorldStateData",
    "CNetworkPtFXEvent",
    "CNetworkPtFXWorldStateData",
    "CNetworkReadLeaderboards",
    "CNetworkRespondedToThreatEvent",
    "CNetworkRoadNodeWorldStateData",
    "CNetworkRopeWorldStateData",
    "CNetworkSCNewsStoryRequest",
    "CNetworkScenarioBlockingAreaWorldStateData",
    "CNetworkShoutTargetPositionEvent",
    "CNetworkSpecialFireEquippedWeaponEvent",
    "CNetworkSyncDataUL",
    "CNetworkSyncDataULBase",
    "CNetworkTrainReportEvent",
    "CNetworkTrainRequestEvent",
    "CNetworkTunablesListener",
    "CNetworkVehiclePlayerLockingWorldState",
    "CNetworkWorldStateData",
    "CNetworkWriteLeaderboards",
    "CNewsItemPresenceEvent",
    "CNmBlendOutBlendItem",
    "CNmBlendOutItem",
    "CNmBlendOutMotionStateItem",
    "CNmBlendOutPoseItem",
    "CNmBlendOutReactionItem",
    "CNmBlendOutSet",
    "CNmBlendOutSetManager",
    "CNmMessage",
    "CNmParameter",
    "CNmParameterBool",
    "CNmParameterFloat",
    "CNmParameterInt",
    "CNmParameterRandomFloat",
    "CNmParameterRandomInt",
    "CNmParameterResetMessage",
    "CNmParameterString",
    "CNmParameterVector",
    "CNmTuningSet",
    "CNonPhysicalPlayerData",
    "CObjInterp",
    "CObject",
    "CObjectCoverExtension",
    "CObjectCreationDataNode",
    "CObjectDrawHandler",
    "CObjectFragmentDrawHandler",
    "CObjectGameStateDataNode",
    "CObjectIntelligence",
    "CObjectScanner",
    "CObjectScriptGameStateDataNode",
    "CObjectSectorPosNode",
    "CObjectSyncData",
    "CObjectSyncTree",
    "COrder",
    "COrdersArrayHandler",
    "CParticleAttr",
    "CPartyClanData",
    "CPartyMenu",
    "CPartyPlayerCardDataManager",
    "CPathFind",
    "CPathNodeRouteSearchHelper",
    "CPathRegion",
    "CPathRequest",
    "CPathServerGameInterfaceGta",
    "CPathServerRequestBase",
    "CPathServerThread",
    "CPatrolLink",
    "CPatrolNode",
    "CPauseStoreMenu",
    "CPauseVideoEditorMenu",
    "CPed",
    "CPedAIDataNode",
    "CPedAppearanceDataNode",
    "CPedAttachDataNode",
    "CPedBigPrototype",
    "CPedBlenderData",
    "CPedBlenderDataAnimatedRagdollFallback",
    "CPedBlenderDataFirstPersonMode",
    "CPedBlenderDataInWater",
    "CPedBlenderDataTennis",
    "CPedBlenderDataUsingParachute",
    "CPedClothCollision",
    "CPedCompExpressionData",
    "CPedComponentReservationDataNode",
    "CPedConversationLineEvent",
    "CPedCreationDataNode",
    "CPedDamageDataMounter",
    "CPedDamageDecalInfo",
    "CPedDamagePackEntry",
    "CPedDamageResponse",
    "CPedDamageSet",
    "CPedDamageSetBase",
    "CPedDecorationsDataFileMounter",
    "CPedDrawHandler",
    "CPedFactory",
    "CPedFormation",
    "CPedFormation_Arrowhead",
    "CPedFormation_FollowInLine",
    "CPedFormation_LineAbreast",
    "CPedFormation_Loose",
    "CPedFormation_Pair",
    "CPedFormation_Single",
    "CPedFormation_SurroundFacingAhead",
    "CPedFormation_SurroundFacingInwards",
    "CPedFormation_V",
    "CPedGameStateDataNode",
    "CPedGenNavMeshIteratorAmbient",
    "CPedGroupsArrayHandler",
    "CPedHeadBlendData",
    "CPedHealthDataNode",
    "CPedIntelligenceFactory",
    "CPedInterp",
    "CPedInventory",
    "CPedInventoryDataNode",
    "CPedModelInfo",
    "CPedModelMetaDataFileMounter",
    "CPedMovementDataNode",
    "CPedMovementGroupDataNode",
    "CPedOrientationDataNode",
    "CPedPlayPainEvent",
    "CPedPropExpressionData",
    "CPedScanner",
    "CPedScriptCreationDataNode",
    "CPedScriptGameStateDataNode",
    "CPedSectorPosMapNode",
    "CPedSectorPosNavMeshNode",
    "CPedStreamRenderGfx",
    "CPedStreamRequestGfx",
    "CPedSyncData",
    "CPedSyncTree",
    "CPedSyncTreeBase",
    "CPedTaskManager",
    "CPedTaskSequenceDataNode",
    "CPedTaskSpecificDataNode",
    "CPedTaskTreeDataNode",
    "CPedVariationStreamFileMounter",
    "CPedWeaponManager",
    "CPhysical",
    "CPhysicalAngVelocityDataNode",
    "CPhysicalAttachDataNode",
    "CPhysicalGameStateDataNode",
    "CPhysicalHealthDataNode",
    "CPhysicalMigrationDataNode",
    "CPhysicalScriptGameStateDataNode",
    "CPhysicalScriptMigrationDataNode",
    "CPhysicalSyncTreeBase",
    "CPhysicalVelocityDataNode",
    "CPickup",
    "CPickupActionAudio",
    "CPickupActionData",
    "CPickupActionGroup",
    "CPickupActionPadShake",
    "CPickupActionVfx",
    "CPickupCreationDataNode",
    "CPickupData",
    "CPickupDataManagerMounter",
    "CPickupDestroyedEvent",
    "CPickupInterp",
    "CPickupPlacementCreationDataNode",
    "CPickupPlacementStateDataNode",
    "CPickupPlacementSyncData",
    "CPickupPlacementSyncTree",
    "CPickupRewardAmmo",
    "CPickupRewardArmour",
    "CPickupRewardBulletMP",
    "CPickupRewardData",
    "CPickupRewardFireworkMP",
    "CPickupRewardGrenadeLauncherMP",
    "CPickupRewardHealth",
    "CPickupRewardHealthVariable",
    "CPickupRewardMissileMP",
    "CPickupRewardMoneyFixed",
    "CPickupRewardMoneyVariable",
    "CPickupRewardStat",
    "CPickupRewardStatVariable",
    "CPickupRewardVehicleFix",
    "CPickupRewardWeapon",
    "CPickupScriptGameStateNode",
    "CPickupSectorPosNode",
    "CPickupSyncData",
    "CPickupSyncTree",
    "CPlane",
    "CPlaneControlDataNode",
    "CPlaneGameStateDataNode",
    "CPlaneIntelligence",
    "CPlaneSyncTree",
    "CPlaySoundEvent",
    "CPlayerAmbientModelStreamingNode",
    "CPlayerAppearanceDataNode",
    "CPlayerCameraDataNode",
    "CPlayerCardStatEvent",
    "CPlayerCreationDataNode",
    "CPlayerExtendedGameStateNode",
    "CPlayerGameStateDataNode",
    "CPlayerGamerDataNode",
    "CPlayerInfo",
    "CPlayerListMenu",
    "CPlayerListMenuDataPaginator",
    "CPlayerListMenuPage",
    "CPlayerPedGroupDataNode",
    "CPlayerPedTargeting",
    "CPlayerSectorPosNode",
    "CPlayerSwitchEstablishingShotMetadata",
    "CPlayerSwitchEstablishingShotMetadataStore",
    "CPlayerSwitchMgrBase",
    "CPlayerSwitchMgrLong",
    "CPlayerSwitchMgrShort",
    "CPlayerSyncData",
    "CPlayerSyncTree",
    "CPlayerTauntEvent",
    "CPlayerWantedAndLOSDataNode",
    "CPlayersMenu",
    "CPoliceAutomobileDispatch",
    "CPoliceBoatDispatch",
    "CPoliceHelicopterDispatch",
    "CPoliceOrder",
    "CPoliceRidersDispatch",
    "CPoliceRoadBlockDispatch",
    "CPoliceVehicleRequest",
    "CPopulationDataFileMounter",
    "CPortalInst",
    "CPortalTracker",
    "CPortalTrackerBase",
    "CPortalVisTracker",
    "CPosixTimeStampForMultiplayerSaves",
    "CPrioritizedClipSetRequest",
    "CProcObjAttr",
    "CProfileStatsRecords",
    "CProjectBaseSyncParentNode",
    "CProjectSyncTree",
    "CProjectile",
    "CProjectileRocket",
    "CProjectileThrown",
    "CPropManagementHelper",
    "CPropeller",
    "CPropellerBlurred",
    "CProximityMigrateableSyncTreeBase",
    "CPtFxCallbacks",
    "CPtFxColnBase",
    "CPtFxColnBound",
    "CPtFxColnPlane",
    "CPtFxDrawHandler",
    "CPtFxGPUManager",
    "CPtFxGPURenderSetup",
    "CPtFxSortedEntity",
    "CPtfxShadowDrawToAllCascades",
    "CQuadBike",
    "CQuadrupedCapsuleInfo",
    "CRTStructureDataToBeSaved",
    "CRTStructureDataToBeSaved_MultiplayerCharacter",
    "CRTStructureDataToBeSaved_MultiplayerCommon",
    "CRTStructureDataToBeSaved_SinglePlayer",
    "CRadioWheel",
    "CRagdollRequestEvent",
    "CRawClipFileDataProvider",
    "CRawClipFileView",
    "CRelationshipGroup",
    "CRemoteScriptInfoEvent",
    "CRemoteScriptLeaveEvent",
    "CRemoveAllWeaponsEvent",
    "CRemovePedFromPedGroupEvent",
    "CRemoveStickyBombEvent",
    "CRemoveWeaponEvent",
    "CRenderPhase",
    "CRenderPhaseCascadeShadows",
    "CRenderPhaseCloudGeneration",
    "CRenderPhaseDeferredLighting_LightsToScreen",
    "CRenderPhaseDeferredLighting_SceneToGBuffer",
    "CRenderPhaseDrawScene",
    "CRenderPhaseFrontEnd",
    "CRenderPhaseHeight",
    "CRenderPhaseHud",
    "CRenderPhaseLensDistortion",
    "CRenderPhaseMirrorReflection",
    "CRenderPhaseParaboloidShadow",
    "CRenderPhasePedDamageUpdate",
    "CRenderPhasePhoneModel",
    "CRenderPhasePhoneScreen",
    "CRenderPhasePreRenderViewport",
    "CRenderPhaseRainUpdate",
    "CRenderPhaseReflection",
    "CRenderPhaseScanned",
    "CRenderPhaseScript2d",
    "CRenderPhaseTimeBars",
    "CRenderPhaseWaterReflection",
    "CRenderPhaseWaterSurface",
    "CReplayClipScanner",
    "CReplayExtensionsController",
    "CReplayInterface",
    "CReplayInterfaceCamera",
    "CReplayInterfaceGame",
    "CReplayInterfaceObject",
    "CReplayInterfacePed",
    "CReplayInterfacePickup",
    "CReplayInterfaceVeh",
    "CReplayPlaybackController",
    "CReplayPreloader",
    "CReplayPreplayer",
    "CReportCashSpawnEvent",
    "CReportMenu",
    "CRequestControlEvent",
    "CRequestDetachmentEvent",
    "CRequestDoorEvent",
    "CRequestMapPickupEvent",
    "CRequestNetworkSyncedSceneEvent",
    "CRequestPhoneExplosionEvent",
    "CRequestPickupEvent",
    "CRespawnPlayerPedEvent",
    "CRewardedVehicleExtension",
    "CRoadBlock",
    "CRoadBlockSpikeStrip",
    "CRoadBlockVehicles",
    "CRootSlopeFixupIkSolver",
    "CRotaryWingAircraft",
    "CRsRef",
    "CSGameManager",
    "CSManagerBase",
    "CSPClusterFSMWrapper",
    "CSPFriendPlayerCardDataManager",
    "CSPPlayerListMenu",
    "CSSHandler",
    "CSSStringBuilder",
    "CSSTextFormatLoader",
    "CSaveGameBuffer",
    "CSaveGameBuffer_MultiplayerCharacter",
    "CSaveGameBuffer_MultiplayerCommon",
    "CSaveGameBuffer_SinglePlayer",
    "CSavegameFrontEnd",
    "CSavegamePhotoMugshotUploader",
    "CSavegameQueuedOperation",
    "CSavegameQueuedOperation_Autosave",
    "CSavegameQueuedOperation_CheckFileExists",
    "CSavegameQueuedOperation_CreateSortedListOfLocalPhotos",
    "CSavegameQueuedOperation_DeleteFile",
    "CSavegameQueuedOperation_DeleteReplayClips",
    "CSavegameQueuedOperation_DeleteReplayFile",
    "CSavegameQueuedOperation_EnumerateReplayFiles",
    "CSavegameQueuedOperation_LoadLocalPhoto",
    "CSavegameQueuedOperation_LoadMontage",
    "CSavegameQueuedOperation_LoadMostRecentSave",
    "CSavegameQueuedOperation_LoadPhotoForMissionCreator",
    "CSavegameQueuedOperation_LoadReplayClip",
    "CSavegameQueuedOperation_LoadReplayHeader",
    "CSavegameQueuedOperation_MPStats_Load",
    "CSavegameQueuedOperation_MPStats_Save",
    "CSavegameQueuedOperation_ManualLoad",
    "CSavegameQueuedOperation_ManualSave",
    "CSavegameQueuedOperation_MissionRepeatLoad",
    "CSavegameQueuedOperation_MissionRepeatSave",
    "CSavegameQueuedOperation_PhotoSave",
    "CSavegameQueuedOperation_ReplayUpdateFavourites",
    "CSavegameQueuedOperation_SaveLocalPhoto",
    "CSavegameQueuedOperation_SaveMontage",
    "CSavegameQueuedOperation_SavePhotoForMissionCreator",
    "CSavegameQueuedOperation_UpdateMetadataOfLocalAndCloudPhoto",
    "CSavegameQueuedOperation_UploadLocalPhotoToCloud",
    "CSavegameQueuedOperation_UploadMugshot",
    "CScaleformColourClass",
    "CScaleformMovieCreationTask",
    "CScaleformPauseMenuLUTClass",
    "CScaleformPreallocationDataFileMounter",
    "CScenarioActionCombatExit",
    "CScenarioActionConditionCanDoQuickBlendout",
    "CScenarioActionConditionCloseOrRecent",
    "CScenarioActionConditionCurrentlyRespondingToOtherEvent",
    "CScenarioActionConditionEvent",
    "CScenarioActionConditionForceAction",
    "CScenarioActionConditionInRange",
    "CScenarioActionConditionIsACopPed",
    "CScenarioActionConditionIsAGangPed",
    "CScenarioActionConditionIsASecurityPed",
    "CScenarioActionConditionNot",
    "CScenarioActionConditionResponseTask",
    "CScenarioActionConditionResponseType",
    "CScenarioActionCowardExitThenRespondToEvent",
    "CScenarioActionFlee",
    "CScenarioActionHeadTrack",
    "CScenarioActionImmediateExit",
    "CScenarioActionManager",
    "CScenarioActionNormalExit",
    "CScenarioActionNormalExitThenRespondToEvent",
    "CScenarioActionScriptExit",
    "CScenarioActionThreatResponseExit",
    "CScenarioClipHelper",
    "CScenarioCondition",
    "CScenarioConditionAffluence",
    "CScenarioConditionAlert",
    "CScenarioConditionAmbientEventDirection",
    "CScenarioConditionAmbientEventTypeCheck",
    "CScenarioConditionArePedConfigFlagsSet",
    "CScenarioConditionArePedConfigFlagsSetOnOtherPed",
    "CScenarioConditionAttachedToPropOfType",
    "CScenarioConditionBraveryFlagSet",
    "CScenarioConditionCanPlayInCarIdle",
    "CScenarioConditionCanStartNewPhoneConversation",
    "CScenarioConditionCrouched",
    "CScenarioConditionDistanceToPlayer",
    "CScenarioConditionEquippedWeapon",
    "CScenarioConditionFullyInIdle",
    "CScenarioConditionHasComponentWithFlag",
    "CScenarioConditionHasHighHeels",
    "CScenarioConditionHasNoProp",
    "CScenarioConditionHasParachute",
    "CScenarioConditionHasProp",
    "CScenarioConditionHeadbobMusicGenre",
    "CScenarioConditionHealth",
    "CScenarioConditionInCover",
    "CScenarioConditionInInterior",
    "CScenarioConditionInStationaryVehicleScenario",
    "CScenarioConditionInVehicleOfType",
    "CScenarioConditionInVehicleSeat",
    "CScenarioConditionIsHeadbobbingToRadioMusicEnabled",
    "CScenarioConditionIsMale",
    "CScenarioConditionIsMultiplayerGame",
    "CScenarioConditionIsPanicking",
    "CScenarioConditionIsPlayer",
    "CScenarioConditionIsPlayerInMultiplayerGame",
    "CScenarioConditionIsPlayerTired",
    "CScenarioConditionIsRadioPlaying",
    "CScenarioConditionIsRadioPlayingMusic",
    "CScenarioConditionIsReaction",
    "CScenarioConditionIsSwat",
    "CScenarioConditionIsTwoHandedWeaponEquipped",
    "CScenarioConditionJustGotUp",
    "CScenarioConditionModel",
    "CScenarioConditionMovementModeType",
    "CScenarioConditionOnStraightPath",
    "CScenarioConditionOutOfBreath",
    "CScenarioConditionPedHeading",
    "CScenarioConditionPhoneConversationAvailable",
    "CScenarioConditionPhoneConversationStarting",
    "CScenarioConditionPlayerHasSpaceForIdle",
    "CScenarioConditionPlayingAnim",
    "CScenarioConditionRaining",
    "CScenarioConditionRoleInSyncedScene",
    "CScenarioConditionSet",
    "CScenarioConditionSetOr",
    "CScenarioConditionSnowing",
    "CScenarioConditionSpeed",
    "CScenarioConditionSunny",
    "CScenarioConditionTechSavvy",
    "CScenarioConditionTime",
    "CScenarioConditionWet",
    "CScenarioConditionWindy",
    "CScenarioConditionWorldPosWithinSphere",
    "CScenarioConditionWorldSet",
    "CScenarioFinder",
    "CScenarioInfoManager",
    "CScenarioLookAtInfo",
    "CScenarioMoveBetweenInfo",
    "CScenarioParkedVehicleInfo",
    "CScenarioPhoneConversationInProgress",
    "CScenarioPointManager",
    "CScenarioSkiLiftInfo",
    "CScenarioSkiingInfo",
    "CScenarioWanderingInRadiusInfo",
    "CScenarioWanderingInfo",
    "CSceneStreamer",
    "CSceneStreamerBase",
    "CSceneStreamerMgr",
    "CScriptArrayDataVerifyEvent",
    "CScriptBrainFileMounter",
    "CScriptEntityStateChangeEvent",
    "CScriptIncident",
    "CScriptMenu",
    "CScriptMetadata",
    "CScriptOp",
    "CScriptResource_Animation",
    "CScriptResource_Camera",
    "CScriptResource_Checkpoint",
    "CScriptResource_ClipSet",
    "CScriptResource_ClothDictionary",
    "CScriptResource_Coverpoint",
    "CScriptResource_CutFile",
    "CScriptResource_CutScene",
    "CScriptResource_DispatchTimeBetweenSpawnAttempts",
    "CScriptResource_DispatchTimeBetweenSpawnAttemptsMultiplier",
    "CScriptResource_Drawable",
    "CScriptResource_DrawableDictionary",
    "CScriptResource_Fire",
    "CScriptResource_FragDictionary",
    "CScriptResource_ItemSet",
    "CScriptResource_MLO",
    "CScriptResource_Model",
    "CScriptResource_MovementMode_Asset",
    "CScriptResource_MovieMeshSet",
    "CScriptResource_PTFX",
    "CScriptResource_PTFX_Asset",
    "CScriptResource_PatrolRoute",
    "CScriptResource_PedGroup",
    "CScriptResource_PopScheduleVehicleModelOverride",
    "CScriptResource_RadarBlip",
    "CScriptResource_RelGroup",
    "CScriptResource_Rope",
    "CScriptResource_ScaleformMovie",
    "CScriptResource_ScenarioBlockingArea",
    "CScriptResource_SequenceTask",
    "CScriptResource_SpeedZone",
    "CScriptResource_StreamedScript",
    "CScriptResource_SyncedScene",
    "CScriptResource_TextureDictionary",
    "CScriptResource_VehicleCombatAvoidanceArea",
    "CScriptResource_VehicleRecording",
    "CScriptResource_Vehicle_Asset",
    "CScriptResource_Weapon_Asset",
    "CScriptShapeTestResults",
    "CScriptStreamingResource",
    "CScriptWorldStateEvent",
    "CScriptedCoronaPlayerCardDataManager",
    "CScriptedCoronaPlayerListDataManager",
    "CScriptedCoverPoint",
    "CScriptedDirectorPlayerCardDataManager",
    "CScriptedGameEvent",
    "CScriptedPlayerCardDataManager",
    "CScriptedPlayersMenu",
    "CScrollBarAttr",
    "CSeaPlaneExtension",
    "CSeaPlaneHandlingData",
    "CSearchLight",
    "CSectorDataNode",
    "CSectorPositionDataNode",
    "CSelectionWheel",
    "CSendKickVotesEvent",
    "CSerialisedFSMTaskInfo",
    "CSetLightingConstants",
    "CSetPedFacialIdleAnimOverride",
    "CSetPedRagdollBlockFlagParameters",
    "CSetVehicleExclusiveDriver",
    "CSetVehicleLockState",
    "CSettingOfDriveTaskCruiseSpeed",
    "CSettingOfLookAtEntity",
    "CSettingOfPedRelationshipGroupHashParameters",
    "CSettingOfPlaneMinHeightAboveTerrainParameters",
    "CSettingOfTaskVehicleTempAction",
    "CSettings",
    "CSettingsManager",
    "CSettingsMenu",
    "CShaderVariableComponent",
    "CShapeTestBatchDesc",
    "CShapeTestBoundDesc",
    "CShapeTestBoundingBoxDesc",
    "CShapeTestCapsuleDesc",
    "CShapeTestDesc",
    "CShapeTestProbeDesc",
    "CShapeTestSphereDesc",
    "CShopData",
    "CSocialClubInboxMgr",
    "CSpawnPoint",
    "CSpawnPointOverrideExtension",
    "CSpinnerData",
    "CStartNetworkPedArrestEvent",
    "CStartNetworkPedUncuffEvent",
    "CStartNetworkSyncedSceneEvent",
    "CStartProjectileEvent",
    "CStatUpdatePresenceEvent",
    "CStatsDisplayListFileMounter",
    "CStatsMenu",
    "CStatsSaveStructure",
    "CStatsUIListFileMounter",
    "CStealVehicleCrime",
    "CStickyBombsArrayHandler",
    "CStopNetworkSyncedSceneEvent",
    "CStopSoundEvent",
    "CStreamedScripts",
    "CStreamingCleanup",
    "CStreamingRequestList",
    "CSubmarine",
    "CSubmarineCar",
    "CSubmarineControlDataNode",
    "CSubmarineGameStateDataNode",
    "CSubmarineHandlingData",
    "CSubmarineSyncTree",
    "CSwatAutomobileDispatch",
    "CSwatHelicopterDispatch",
    "CSwatOrder",
    "CSyncDataBase",
    "CSyncDataLogger",
    "CSyncDataReader",
    "CSyncDataSizeCalculator",
    "CSyncDataWriter",
    "CSyncedSceneAudioInterface",
    "CSystemSettings",
    "CTacticalAnalysis",
    "CTargettingDifficultyInfo",
    "CTask",
    "CTaskAdvance",
    "CTaskAffectSecondaryBehaviour",
    "CTaskAggressiveRubberneck",
    "CTaskAgitated",
    "CTaskAgitatedAction",
    "CTaskAimAndThrowProjectile",
    "CTaskAimFromGround",
    "CTaskAimGun",
    "CTaskAimGunBlindFire",
    "CTaskAimGunFromCoverIntro",
    "CTaskAimGunFromCoverOutro",
    "CTaskAimGunOnFoot",
    "CTaskAimGunScripted",
    "CTaskAimGunVehicleDriveBy",
    "CTaskAimSweep",
    "CTaskAmbientClips",
    "CTaskAmbientLookAtEvent",
    "CTaskAmbulancePatrol",
    "CTaskAnimatedAttach",
    "CTaskAnimatedFallback",
    "CTaskAnimatedHitByExplosion",
    "CTaskArmy",
    "CTaskArrestPed",
    "CTaskArrestPed2",
    "CTaskBirdLocomotion",
    "CTaskBlendFromNM",
    "CTaskBoatChase",
    "CTaskBoatCombat",
    "CTaskBoatStrafe",
    "CTaskBomb",
    "CTaskBringVehicleToHalt",
    "CTaskBusted",
    "CTaskCallPolice",
    "CTaskCarDrive",
    "CTaskCarDriveWander",
    "CTaskCarReactToVehicleCollision",
    "CTaskCarReactToVehicleCollisionGetOut",
    "CTaskCarSetTempAction",
    "CTaskCharge",
    "CTaskChat",
    "CTaskChatScenario",
    "CTaskClearLookAt",
    "CTaskClimbLadder",
    "CTaskClimbLadderFully",
    "CTaskClip",
    "CTaskCloseVehicleDoorFromInside",
    "CTaskCloseVehicleDoorFromOutside",
    "CTaskCombat",
    "CTaskCombatAdditionalTask",
    "CTaskCombatClosestTargetInArea",
    "CTaskCombatFlank",
    "CTaskCombatMounted",
    "CTaskCombatMountedTransitions",
    "CTaskCombatRoll",
    "CTaskCombatSeekCover",
    "CTaskComplex",
    "CTaskComplexControlMovement",
    "CTaskComplexEvasiveStep",
    "CTaskComplexGetOffBoat",
    "CTaskComplexOnFire",
    "CTaskComplexStuckInAir",
    "CTaskConfront",
    "CTaskControlVehicle",
    "CTaskConversationHelper",
    "CTaskCoupleScenario",
    "CTaskCover",
    "CTaskCower",
    "CTaskCowerScenario",
    "CTaskCrawl",
    "CTaskCrouch",
    "CTaskCrouchToggle",
    "CTaskCutScene",
    "CTaskDamageElectric",
    "CTaskDeadBodyScenario",
    "CTaskDetonator",
    "CTaskDiveToGround",
    "CTaskDoNothing",
    "CTaskDraggedToSafety",
    "CTaskDraggingToSafety",
    "CTaskDropDown",
    "CTaskDuckAndCover",
    "CTaskDyingDead",
    "CTaskEnterCover",
    "CTaskEnterVehicle",
    "CTaskEnterVehicleAlign",
    "CTaskEnterVehicleSeat",
    "CTaskEscapeBlast",
    "CTaskExhaustedFlee",
    "CTaskExitCover",
    "CTaskExitVehicle",
    "CTaskExitVehicleSeat",
    "CTaskFSMClone",
    "CTaskFall",
    "CTaskFallAndGetUp",
    "CTaskFallOver",
    "CTaskFirePatrol",
    "CTaskFishLocomotion",
    "CTaskFlightlessBirdLocomotion",
    "CTaskFlyAway",
    "CTaskFlyingWander",
    "CTaskFollowLeaderAnyMeans",
    "CTaskFollowLeaderInFormation",
    "CTaskFollowWaypointRecording",
    "CTaskForceMotionState",
    "CTaskGangPatrol",
    "CTaskGeneralSweep",
    "CTaskGetOffTrain",
    "CTaskGetOnTrain",
    "CTaskGetOutOfWater",
    "CTaskGetUp",
    "CTaskGetUpAndStandStill",
    "CTaskGoToAndClimbLadder",
    "CTaskGoToCarDoorAndStandStill",
    "CTaskGoToPointAiming",
    "CTaskGoToPointAnyMeans",
    "CTaskGoToScenario",
    "CTaskGrowlAndFlee",
    "CTaskGun",
    "CTaskHandsUp",
    "CTaskHeliChase",
    "CTaskHeliCombat",
    "CTaskHeliOrderResponse",
    "CTaskHeliPassengerRappel",
    "CTaskHelicopterStrafe",
    "CTaskHelperFSM",
    "CTaskHitWall",
    "CTaskHumanLocomotion",
    "CTaskInCover",
    "CTaskInVehicleBasic",
    "CTaskInVehicleSeatShuffle",
    "CTaskInfo",
    "CTaskIntimidate",
    "CTaskInvestigate",
    "CTaskJump",
    "CTaskJumpVault",
    "CTaskLeaveAnyCar",
    "CTaskList",
    "CTaskManager",
    "CTaskMelee",
    "CTaskMeleeActionResult",
    "CTaskMeleeUpperbodyAnims",
    "CTaskMoVEScripted",
    "CTaskMobilePhone",
    "CTaskMotionAiming",
    "CTaskMotionAimingTransition",
    "CTaskMotionBase",
    "CTaskMotionBasicLocomotionLowLod",
    "CTaskMotionDiving",
    "CTaskMotionDrunk",
    "CTaskMotionInAutomobile",
    "CTaskMotionInCover",
    "CTaskMotionInTurret",
    "CTaskMotionInVehicle",
    "CTaskMotionOnBicycle",
    "CTaskMotionOnBicycleController",
    "CTaskMotionParachuting",
    "CTaskMotionPed",
    "CTaskMotionPedLowLod",
    "CTaskMotionStrafing",
    "CTaskMotionSwimming",
    "CTaskMotionTennis",
    "CTaskMountThrowProjectile",
    "CTaskMoveBetweenPointsScenario",
    "CTaskMoveInterface",
    "CTaskMoveToTacticalPoint",
    "CTaskMoveWithinAttackWindow",
    "CTaskMoveWithinDefensiveArea",
    "CTaskNMBalance",
    "CTaskNMBehaviour",
    "CTaskNMBrace",
    "CTaskNMBuoyancy",
    "CTaskNMControl",
    "CTaskNMDangle",
    "CTaskNMDraggingToSafety",
    "CTaskNMDrunk",
    "CTaskNMElectrocute",
    "CTaskNMExplosion",
    "CTaskNMFallDown",
    "CTaskNMFlinch",
    "CTaskNMGenericAttach",
    "CTaskNMHighFall",
    "CTaskNMInjuredOnGround",
    "CTaskNMJumpRollFromRoadVehicle",
    "CTaskNMOnFire",
    "CTaskNMPose",
    "CTaskNMPrototype",
    "CTaskNMRelax",
    "CTaskNMRiverRapids",
    "CTaskNMScriptControl",
    "CTaskNMShot",
    "CTaskNMSimple",
    "CTaskNMSit",
    "CTaskNMThroughWindscreen",
    "CTaskNetworkClone",
    "CTaskOpenDoor",
    "CTaskOpenVehicleDoorFromOutside",
    "CTaskParachute",
    "CTaskParachuteObject",
    "CTaskPatrol",
    "CTaskPause",
    "CTaskPlaneChase",
    "CTaskPlayerDrive",
    "CTaskPlayerIdles",
    "CTaskPlayerOnFoot",
    "CTaskPlayerWeapon",
    "CTaskPolice",
    "CTaskPoliceOrderResponse",
    "CTaskPoliceWantedResponse",
    "CTaskPursueCriminal",
    "CTaskQuadLocomotion",
    "CTaskRageRagdoll",
    "CTaskRappel",
    "CTaskReactAimWeapon",
    "CTaskReactAndFlee",
    "CTaskReactInDirection",
    "CTaskReactToBeingAskedToLeaveVehicle",
    "CTaskReactToBeingJacked",
    "CTaskReactToBuddyShot",
    "CTaskReactToDeadPed",
    "CTaskReactToExplosion",
    "CTaskReactToGunAimedAt",
    "CTaskReactToImminentExplosion",
    "CTaskReactToPursuit",
    "CTaskReloadGun",
    "CTaskRepositionMove",
    "CTaskRevive",
    "CTaskRideTrain",
    "CTaskRunClip",
    "CTaskRunNamedClip",
    "CTaskSayAudio",
    "CTaskScenario",
    "CTaskScenarioFlee",
    "CTaskScriptedAnimation",
    "CTaskSearch",
    "CTaskSearchBase",
    "CTaskSearchForUnknownThreat",
    "CTaskSearchInAutomobile",
    "CTaskSearchInBoat",
    "CTaskSearchInHeli",
    "CTaskSearchInVehicleBase",
    "CTaskSearchOnFoot",
    "CTaskSeekEntityAiming",
    "CTaskSeparate",
    "CTaskSetAndGuardArea",
    "CTaskSetBlockingOfNonTemporaryEvents",
    "CTaskSetCharDecisionMaker",
    "CTaskSetPedDefensiveArea",
    "CTaskSetPedInVehicle",
    "CTaskSetPedOutOfVehicle",
    "CTaskSharkAttack",
    "CTaskShootAtTarget",
    "CTaskShootOutTire",
    "CTaskShove",
    "CTaskShovePed",
    "CTaskShoved",
    "CTaskSidestep",
    "CTaskSlideToCoord",
    "CTaskSlopeScramble",
    "CTaskSmartFlee",
    "CTaskSmashCarWindow",
    "CTaskStandGuard",
    "CTaskStandGuardFSM",
    "CTaskStayInCover",
    "CTaskStealVehicle",
    "CTaskStealthKill",
    "CTaskSubmarineChase",
    "CTaskSubmarineCombat",
    "CTaskSwapWeapon",
    "CTaskSwat",
    "CTaskSwatFollowInLine",
    "CTaskSwatGoToStagingArea",
    "CTaskSwatOrderResponse",
    "CTaskSwatWantedResponse",
    "CTaskSwimmingWander",
    "CTaskSynchronizedScene",
    "CTaskTakeOffHelmet",
    "CTaskTakeOffPedVariation",
    "CTaskTargetUnreachable",
    "CTaskTargetUnreachableInExterior",
    "CTaskTargetUnreachableInInterior",
    "CTaskThreatResponse",
    "CTaskThrowProjectile",
    "CTaskToHurtTransit",
    "CTaskTrainBase",
    "CTaskTree",
    "CTaskTreeClone",
    "CTaskTreeMotion",
    "CTaskTreeMovement",
    "CTaskTreePed",
    "CTaskTriggerLookAt",
    "CTaskTryToGrabVehicleDoor",
    "CTaskTurnToFaceEntityOrCoord",
    "CTaskUnalerted",
    "CTaskUseClimbOnRoute",
    "CTaskUseDropDownOnRoute",
    "CTaskUseLadderOnRoute",
    "CTaskUseScenario",
    "CTaskUseScenarioEntityExtension",
    "CTaskUseSequence",
    "CTaskUseVehicleScenario",
    "CTaskVariedAimPose",
    "CTaskVault",
    "CTaskVehicleAnimation",
    "CTaskVehicleApproach",
    "CTaskVehicleAttack",
    "CTaskVehicleAttackTank",
    "CTaskVehicleBlock",
    "CTaskVehicleBlockBackAndForth",
    "CTaskVehicleBlockBrakeInFront",
    "CTaskVehicleBlockCruiseInFront",
    "CTaskVehicleBoostUseSteeringAngle",
    "CTaskVehicleBrake",
    "CTaskVehicleBurnout",
    "CTaskVehicleChase",
    "CTaskVehicleCircle",
    "CTaskVehicleCombat",
    "CTaskVehicleConvertibleRoof",
    "CTaskVehicleCrash",
    "CTaskVehicleCruiseBoat",
    "CTaskVehicleCruiseNew",
    "CTaskVehicleDeadDriver",
    "CTaskVehicleEscort",
    "CTaskVehicleFSM",
    "CTaskVehicleFlee",
    "CTaskVehicleFleeAirborne",
    "CTaskVehicleFleeBoat",
    "CTaskVehicleFlyDirection",
    "CTaskVehicleFollow",
    "CTaskVehicleFollowRecording",
    "CTaskVehicleFollowWaypointRecording",
    "CTaskVehicleGoForward",
    "CTaskVehicleGoTo",
    "CTaskVehicleGoToAutomobileNew",
    "CTaskVehicleGoToBoat",
    "CTaskVehicleGoToHelicopter",
    "CTaskVehicleGoToNavmesh",
    "CTaskVehicleGoToPlane",
    "CTaskVehicleGoToPointAutomobile",
    "CTaskVehicleGoToPointWithAvoidanceAutomobile",
    "CTaskVehicleGoToSubmarine",
    "CTaskVehicleGotoLongRange",
    "CTaskVehicleGun",
    "CTaskVehicleHandBrake",
    "CTaskVehicleHeadonCollision",
    "CTaskVehicleHeliProtect",
    "CTaskVehicleHover",
    "CTaskVehicleLand",
    "CTaskVehicleLandPlane",
    "CTaskVehicleMissionBase",
    "CTaskVehicleMountedWeapon",
    "CTaskVehicleNoDriver",
    "CTaskVehicleParkNew",
    "CTaskVehiclePassengerExit",
    "CTaskVehiclePersuit",
    "CTaskVehiclePlaneChase",
    "CTaskVehiclePlayerDrive",
    "CTaskVehiclePlayerDriveAutogyro",
    "CTaskVehiclePlayerDriveAutomobile",
    "CTaskVehiclePlayerDriveBike",
    "CTaskVehiclePlayerDriveBoat",
    "CTaskVehiclePlayerDriveDiggerArm",
    "CTaskVehiclePlayerDriveHeli",
    "CTaskVehiclePlayerDrivePlane",
    "CTaskVehiclePlayerDriveRotaryWingAircraft",
    "CTaskVehiclePlayerDriveSubmarine",
    "CTaskVehiclePlayerDriveSubmarineCar",
    "CTaskVehiclePlayerDriveTrain",
    "CTaskVehiclePoliceBehaviour",
    "CTaskVehiclePoliceBehaviourBoat",
    "CTaskVehiclePoliceBehaviourHelicopter",
    "CTaskVehicleProjectile",
    "CTaskVehiclePullAlongside",
    "CTaskVehiclePullOver",
    "CTaskVehiclePursue",
    "CTaskVehicleRam",
    "CTaskVehicleReactToCopSiren",
    "CTaskVehicleRevEngine",
    "CTaskVehicleReverse",
    "CTaskVehicleSerialiser",
    "CTaskVehicleSerialiserBase",
    "CTaskVehicleShotTire",
    "CTaskVehicleSpinOut",
    "CTaskVehicleStop",
    "CTaskVehicleSurfaceInSubmarine",
    "CTaskVehicleSwerve",
    "CTaskVehicleTempAction",
    "CTaskVehicleThreePointTurn",
    "CTaskVehicleTransformToSubmarine",
    "CTaskVehicleTurn",
    "CTaskVehicleWait",
    "CTaskWaitForCondition",
    "CTaskWaitForSteppingOut",
    "CTaskWalkAway",
    "CTaskWander",
    "CTaskWanderInArea",
    "CTaskWanderingInRadiusScenario",
    "CTaskWanderingScenario",
    "CTaskWeapon",
    "CTaskWeaponBlocked",
    "CTaskWitness",
    "CTaskWrithe",
    "CTexLodInterface",
    "CTextInputBox",
    "CTextMessageEvent",
    "CTextOverlayHandle",
    "CTimeArchetypeDef",
    "CTimeCycleModifier",
    "CTimeModelInfo",
    "CTorsoIkSolver",
    "CTorsoReactIkSolver",
    "CTorsoVehicleIkSolver",
    "CTorsoVehicleIkSolverProxy",
    "CTournamentInvite",
    "CTrackedEventInfo",
    "CTrackedEventInfoBase",
    "CTrailer",
    "CTrailerHandlingData",
    "CTrailerLegs",
    "CTrain",
    "CTrainCloudListener",
    "CTrainConfigFileMounter",
    "CTrainGameStateDataNode",
    "CTrainSyncTree",
    "CTreePrototype",
    "CTuning",
    "CTurret",
    "CTurretPhysical",
    "CTxdRelationship",
    "CUGCStatUpdatePresenceEvent",
    "CUIReplayScaleformController",
    "CUnderwaterArmedTransitions",
    "CUpdateFxnEvent",
    "CUpdateNetworkSyncedSceneEvent",
    "CUpdatePlayerScarsEvent",
    "CVFXBloodFileMounter",
    "CVFXScriptFileMounter",
    "CVehInterp",
    "CVehicle",
    "CVehicleAngVelocityDataNode",
    "CVehicleAppearanceDataNode",
    "CVehicleChaseDirector",
    "CVehicleColorsDataFileMounter",
    "CVehicleCombatAvoidanceArea",
    "CVehicleComponentControlEvent",
    "CVehicleComponentReservationDataNode",
    "CVehicleConditionEntryPointHasOpenableDoor",
    "CVehicleConditionRoofState",
    "CVehicleControlDataNode",
    "CVehicleCreationDataNode",
    "CVehicleDamageStatusDataNode",
    "CVehicleDrawHandler",
    "CVehicleExtrasFileMounter",
    "CVehicleFactory",
    "CVehicleGadget",
    "CVehicleGadgetArticulatedDiggerArm",
    "CVehicleGadgetBoatBoom",
    "CVehicleGadgetBombBay",
    "CVehicleGadgetDataNode",
    "CVehicleGadgetDiggerArm",
    "CVehicleGadgetForks",
    "CVehicleGadgetHandlerFrame",
    "CVehicleGadgetParkingSensor",
    "CVehicleGadgetPickUpRope",
    "CVehicleGadgetPickUpRopeWithHook",
    "CVehicleGadgetPickUpRopeWithMagnet",
    "CVehicleGadgetThresher",
    "CVehicleGadgetTowArm",
    "CVehicleGadgetWithJointsBase",
    "CVehicleGameStateDataNode",
    "CVehicleGlassComponentEntity",
    "CVehicleGlassDrawHandler",
    "CVehicleHandlingFileMounter",
    "CVehicleHealthDataNode",
    "CVehicleIntelligence",
    "CVehicleIntelligenceFactory",
    "CVehicleLeanHelper",
    "CVehicleMetaDataFileMounter",
    "CVehicleMetadataFileMounter",
    "CVehicleModelInfo",
    "CVehicleModelInfoBumperCollision",
    "CVehicleModelInfoBuoyancy",
    "CVehicleModelInfoDoors",
    "CVehicleModelInfoRagdollActivation",
    "CVehicleModelInfoVarGlobal",
    "CVehiclePopulationTuning",
    "CVehicleProximityMigrationDataNode",
    "CVehicleRadar",
    "CVehicleRecording",
    "CVehicleRecordingStreamingModule",
    "CVehicleScanner",
    "CVehicleScriptGameStateDataNode",
    "CVehicleSteeringDataNode",
    "CVehicleStreamRenderGfx",
    "CVehicleStreamRequestGfx",
    "CVehicleSyncData",
    "CVehicleSyncTree",
    "CVehicleTaskDataNode",
    "CVehicleTaskManager",
    "CVehicleTracks",
    "CVehicleTrailerAttachPoint",
    "CVehicleVariationDataFileMounter",
    "CVehicleWaterCannon",
    "CVehicleWeaponBattery",
    "CVehicleWeaponHandlingData",
    "CVehicleWeaponMgr",
    "CVfxExplosionFileMounter",
    "CVfxVehicleInfoFileMounter",
    "CVideoEditorTimelineThumbnailManager",
    "CVideoFileDataProvider",
    "CVideoFileView",
    "CVideoProjectFileDataProvider",
    "CVideoProjectFileView",
    "CVideoSettings",
    "CVideoUploadManager",
    "CVideoUploadManager_Custom",
    "CVideoUploadTunablesListener",
    "CViewport",
    "CViewportFrontend3DScene",
    "CViewportGame",
    "CViewportPrimaryOrtho",
    "CVisualEffectsFileMounter",
    "CVoiceDrivenMouthMovementFinishedEvent",
    "CVoiceSessionInvite",
    "CVoiceSessionResponse",
    "CWantedHelicopterDispatch",
    "CWantedIncident",
    "CWarningMessage",
    "CWaterData",
    "CWaypointRecordingRoute",
    "CWaypointRecordingStreamingInterface",
    "CWeapon",
    "CWeaponAnimationsDataFileMounter",
    "CWeaponComponent",
    "CWeaponComponentClipInfo",
    "CWeaponComponentDataFileMounter",
    "CWeaponComponentFlashLightInfo",
    "CWeaponComponentGroupInfo",
    "CWeaponComponentInfo",
    "CWeaponComponentLaserSightInfo",
    "CWeaponComponentProgrammableTargeting",
    "CWeaponComponentProgrammableTargetingInfo",
    "CWeaponComponentReloadData",
    "CWeaponComponentReloadLoopedData",
    "CWeaponComponentScope",
    "CWeaponComponentScopeInfo",
    "CWeaponComponentSuppressorInfo",
    "CWeaponController",
    "CWeaponControllerFixed",
    "CWeaponControllerPlayer",
    "CWeaponDamageEvent",
    "CWeaponInfo",
    "CWeaponInfoBlob",
    "CWeaponInfoDataFileMounter",
    "CWeaponMetaDataFileMounter",
    "CWeaponModelInfo",
    "CWeaponObserver",
    "CWeaponSwapData",
    "CWeaponWheel",
    "CWheelInstanceData_UsageInfo",
    "CWindDisturbanceAttr",
    "CWitnessInformationManager",
    "CWorldGridOwnerArrayHandler",
    "CWorldPointAttr",
    "CZonedAssets",
    "CacheCatalogParsableInfo",
    "CacheFileData",
    "CacheParsableInfo",
    "Calibration",
    "Calibrations",
    "CatalogCacheListener",
    "ChangeHandler",
    "ClanOpData",
    "ClipData",
    "ClipUID",
    "ClipUserData",
    "ClonedTakeOffPedVariationInfo",
    "CloudCacheListener",
    "CloudFileDeleter",
    "CloudFileLoadListener",
    "CloudFileSaveListener",
    "CloudHatFragContainer",
    "CloudHatFragLayer",
    "CloudHatManager",
    "CloudHatSettings",
    "CloudListController",
    "CloudListener",
    "CloudManagerMemAllocator",
    "Cmd",
    "CmdActivate",
    "CmdChangeAttrs",
    "CmdDestroy",
    "CmdEstablish",
    "CmdHost",
    "CmdHostOffline",
    "CmdJoin",
    "CmdLeave",
    "CmdMigrate",
    "CmdModifyPresenceFlags",
    "CmdSendInvites",
    "CmdUpdateScAdvertisement",
    "CommonScriptInfo",
    "ComponentDescription",
    "ConditionalAnimationsMounter",
    "ConflictList",
    "ControlSettings",
    "CreatePlayerAppearanceTransactionHttpTask",
    "CreateTask",
    "CrewMetaDataCloudFile",
    "CurveGenerator",
    "CutSceneManager",
    "Cxn",
    "DNameStatusNode",
    "Data",
    "DataInterface",
    "DatafileCloudWatcher",
    "DeferredTask",
    "Definition",
    "DefinitionList",
    "DeleteFileWorker",
    "DeleteFromCloudOp",
    "DeletePropertiesCallback",
    "DeleteSlotTransaction",
    "DeleteSlotTransactionHttpTask",
    "DestroyPropertiesCallback",
    "DestroyTagsCallback",
    "DetachUpdateObservers",
    "DeviceSettings",
    "DisposeHandler",
    "DocumentText",
    "DynamicBankListBuilderFn",
    "DynamicMapping",
    "DynamicMappingList",
    "DynamicMappings",
    "DynamicPauseMenu",
    "EarlyLeaveTask",
    "EarnGameTransactionHttpTask",
    "EarnLimitedServiceGameTransactionHttpTask",
    "EndTask",
    "FacialFilter",
    "Factory",
    "FactoryPooled",
    "FallbackMachineHashStrategy",
    "FallbackMachineHashStrategyDuplicate",
    "FileStorePC",
    "Filter",
    "FinalizationCallback",
    "FlushIterator",
    "FontDisposeHandler",
    "FriendsReaderTask",
    "FuncTreeItem",
    "GASActionBuffer",
    "GASActionBufferData",
    "GASDoAction",
    "GASDoInitAction",
    "GASExecuteTag",
    "GASFnCall",
    "GASLocalFrame",
    "GASObjectInterface",
    "GASPrototypeBase",
    "GASRefCountCollector",
    "GASStringManager",
    "GASValueProperty",
    "GAcquireInterface",
    "GBoolFormatter",
    "GDefaultAcquireInterface",
    "GFmtResource",
    "GFormatter",
    "GFxASCSSFileLoader",
    "GFxASMouseListener",
    "GFxASXMLFileLoader",
    "GFxASXMLRootNode",
    "GFxAmpFunctionDesc",
    "GFxAmpFunctionTreeStats",
    "GFxAmpMemFragReport",
    "GFxAmpMemItem",
    "GFxAmpMovieFunctionStats",
    "GFxAmpProfileFrame",
    "GFxAmpViewStats",
    "GFxButtonCharacterDef",
    "GFxCSSFileLoaderAndParserImpl",
    "GFxCompactedFont",
    "GFxConstShapeCharacterDef",
    "GFxConstShapeNoStyles",
    "GFxConstShapeWithStyles",
    "GFxDrawText",
    "GFxDrawTextImpl",
    "GFxDrawingContext",
    "GFxEditTextCharacterDef",
    "GFxExternalLibPtr",
    "GFxFont",
    "GFxFontCacheManager",
    "GFxFontCompactor",
    "GFxFontData",
    "GFxFontDataCompactedGfx",
    "GFxFontDataCompactedSwf",
    "GFxFontGlyphPacker",
    "GFxFontLib",
    "GFxFontManager",
    "GFxFontMap",
    "GFxFontResource",
    "GFxFontResourceCreator",
    "GFxFunctionHandler",
    "GFxGradientData",
    "GFxGradientImageResourceCreator",
    "GFxGradientImageResourceKey",
    "GFxImageCreator",
    "GFxImageFileInfo",
    "GFxImageFileInfoKeyData",
    "GFxImageFileKeyInterface",
    "GFxImageFileResourceCreator",
    "GFxImageResource",
    "GFxImageResourceCreator",
    "GFxInitImportActions",
    "GFxKeyboardState",
    "GFxLineStyle",
    "GFxLoadCSSTask",
    "GFxLoadQueueEntryMT",
    "GFxLoadQueueEntryMT_LoadCSS",
    "GFxLoadQueueEntryMT_LoadMovie",
    "GFxLoadQueueEntryMT_LoadXML",
    "GFxLoadStates",
    "GFxLoadUpdateSync",
    "GFxLoadXMLTask",
    "GFxLoader",
    "GFxLoaderTask",
    "GFxLogBase",
    "GFxMeshCache",
    "GFxMeshCacheLimit",
    "GFxMeshCacheManager",
    "GFxMeshSet",
    "GFxMorphCharacterDef",
    "GFxMovieBindProcess",
    "GFxMovieDataDefFileKeyData",
    "GFxMovieDataDefFileKeyInterface",
    "GFxMovieDefBindStates",
    "GFxMovieDefImplKey",
    "GFxMovieDefImplKeyInterface",
    "GFxMovieImageLoadTask",
    "GFxMoviePreloadTask",
    "GFxParseControl",
    "GFxPlaceObject",
    "GFxPlaceObject2",
    "GFxPlaceObject2a",
    "GFxPlaceObject3",
    "GFxPlaceObjectUnpacked",
    "GFxRemoveObject",
    "GFxRemoveObject2",
    "GFxRenderConfig",
    "GFxRenderGen",
    "GFxRenderGenShape",
    "GFxRenderGenStroker",
    "GFxResource",
    "GFxResourceFileInfo",
    "GFxResourceLib",
    "GFxResourceReport",
    "GFxResourceWeakLib",
    "GFxScale9GridInfo",
    "GFxSetBackgroundColor",
    "GFxShapeBase",
    "GFxShapeCharacterDef",
    "GFxShapeNoStyles",
    "GFxShapeWithStyles",
    "GFxSpriteDef",
    "GFxState",
    "GFxStateBag",
    "GFxStaticTextCharacterDef",
    "GFxStream",
    "GFxStyledText",
    "GFxSubImageResource",
    "GFxSubImageResourceCreator",
    "GFxSubImageResourceInfo",
    "GFxSystemFontResourceKey",
    "GFxSystemFontResourceKeyInterface",
    "GFxTask",
    "GFxTextAllocator",
    "GFxTextClipboard",
    "GFxTextDocView",
    "GFxTextEditorKit",
    "GFxTextFilter",
    "GFxTextHTMLImageTagDesc",
    "GFxTextImageDesc",
    "GFxTextKeyMap",
    "GFxTextureGlyph",
    "GFxTextureGlyphData",
    "GFxVertexInterface",
    "GFxVertexInterface_XY16i",
    "GFxVertexInterface_XY16iC32",
    "GFxVertexInterface_XY16iCF32",
    "GFxVertexInterface_XY32f",
    "GFxVirtualPathIterator",
    "GFxXMLDOMBuilder",
    "GFxXMLDocument",
    "GFxXMLElementNode",
    "GFxXMLFileLoaderAndParserImpl",
    "GFxXMLFileLoaderImpl",
    "GFxXMLNode",
    "GFxXMLParserHandler",
    "GFxXMLPrefix",
    "GFxXMLTextNode",
    "GFxZlibSupport",
    "GMemoryHeap",
    "GMemoryHeapPT",
    "GMsgFormat",
    "GMutex_AreadyLockedAcquireInterface",
    "GRefCountBaseGC",
    "GRefCountBaseNTS",
    "GRefCountCollector",
    "GRefCountImplCore",
    "GRefCountWeakSupportImpl",
    "GRenderer",
    "GResourceFormatter",
    "GStrFormatter",
    "GSwitchFormatter",
    "GSysAllocBase",
    "GSysAllocGranulator",
    "GSysAllocWrapper",
    "GTexture",
    "GWaitable",
    "GameServerPresenceEvent",
    "GameTransactionDeleteSlotTask",
    "GameTransactionItems",
    "GameTransactionSessionMgr",
    "GetCatalogGameTransactionHttpTask",
    "GetTokenAndRunHTTPTask",
    "GtaThread",
    "HeapLimit",
    "HeartBeatGameTransactionHttpTask",
    "Holder",
    "ICommonDataOperations",
    "IDrawListPrototype",
    "IListener",
    "IMachineHashStrategy",
    "IMachineHashStrategyDuplicate",
    "IReplayExtensionsController",
    "IScriptEntityStateParametersBase",
    "InFrame",
    "InitStruct",
    "InputGroupDefinition",
    "InputList",
    "InputMapperAssignment",
    "InputSettings",
    "InstanceBucket",
    "InstanceBucket_LOD2",
    "InvokeCallback",
    "KeyInfo",
    "KeyInterface",
    "Layout",
    "LimitHandler",
    "LoadFromCloudOp",
    "LoadTaskData",
    "LocalInvokeCallback",
    "M",
    "MA",
    "Mapping",
    "MappingList",
    "MappingSettings",
    "MatchFilter",
    "MediaBufferBase",
    "MediaBufferBlob",
    "MediaBufferBlobNV12FromRGB32",
    "MediaBufferExternalBlob",
    "MemberVisitor",
    "MemoryContext",
    "MemoryContextImpl",
    "MemoryFootprint",
    "MemoryManager",
    "MemoryProfileLocation",
    "MemoryProfileLocationList",
    "MemoryProfileModuleStat",
    "MetricACQUIRED_HIDDEN_PACKAGE",
    "MetricACQUIRED_WEAPON",
    "MetricACTIVITY_DONE",
    "MetricAMBIENT_MISSION_CRATE_CREATED",
    "MetricARREST",
    "MetricAUD_STATION_DETUNED",
    "MetricAUD_TRACK_TAGGED",
    "MetricAWARD_XP",
    "MetricAddPresenceInvite",
    "MetricBENCHMARK_FPS",
    "MetricBENCHMARK_P",
    "MetricCASH_CREATED",
    "MetricCHARACTER_SKILLS",
    "MetricCHEAT",
    "MetricCLOTH_CHANGE",
    "MetricCUTSCENE",
    "MetricCheatCRCCompromised",
    "MetricCheatCRCNotReplied",
    "MetricCheatCRCRequestFlood",
    "MetricCheatEXESize",
    "MetricCheatScript",
    "MetricDEATH",
    "MetricDIRECTOR_MODE",
    "MetricDirtyCloudRead",
    "MetricDirtyProfileStatRead",
    "MetricEARNED_ACHIEVEMENT",
    "MetricEMERGENCY_SVCS",
    "MetricENTERED_SOLO_SESSION",
    "MetricEXIT_GAME",
    "MetricFRIEND_ACTIVITY_DONE",
    "MetricFailureToSynchProfileStats",
    "MetricGAMETYPE_GENERIC",
    "MetricGARAGETAMPER",
    "MetricHEIST_SAVE_CHEAT",
    "MetricHourlyXP",
    "MetricIDLEKICK",
    "MetricInfoChange",
    "MetricJOBBENDED",
    "MetricJOBLTS_ENDED",
    "MetricJOBLTS_ROUND_ENDED",
    "MetricJOB_ENDED",
    "MetricJOB_STARTED",
    "MetricLEAVE_JOBCHAIN",
    "MetricLOADGAME",
    "MetricMISSION_CHECKPOINT",
    "MetricMISSION_OVER",
    "MetricMatchmakingQueryResults",
    "MetricMatchmakingQueryStart",
    "MetricMpSession",
    "MetricNETWORK_BAIL",
    "MetricNETWORK_KICKED",
    "MetricNEWGAME",
    "MetricNPC_INVITE",
    "MetricPCHARDWARE_CPU",
    "MetricPCHARDWARE_GPU",
    "MetricPCHARDWARE_MEM",
    "MetricPCHARDWARE_MOBO",
    "MetricPCHARDWARE_OS",
    "MetricPCHARDWARE_OTHER",
    "MetricPCSETTINGS",
    "MetricPLAYER_INJURED",
    "MetricPOST_RACE_CHECKPOINT",
    "MetricPROP_CHANGE",
    "MetricPlayStatString",
    "MetricPlayerCoords",
    "MetricQUICKFIX_TOOL",
    "MetricRANDOMMISSION_DONE",
    "MetricRANK_UP",
    "MetricRDEV",
    "MetricREMOVEAWARD_XP",
    "MetricREPORTER",
    "MetricROS_BET",
    "MetricRQA",
    "MetricReadStatsByGamer2",
    "MetricReadStatsByGroups",
    "MetricRelayUsage",
    "MetricRemoteCheat",
    "MetricRemoteInfoChange",
    "MetricRemoteInfoChange2",
    "MetricRemoteInfoChange3",
    "MetricSESSION_BECAME_HOST",
    "MetricSESSION_HOSTED",
    "MetricSESSION_JOINED",
    "MetricSESSION_LEFT",
    "MetricSPAWN",
    "MetricSTALL_DETECTED",
    "MetricSTART_GAME",
    "MetricSTART_OFFLINEMODE",
    "MetricServiceFailed",
    "MetricShopping",
    "MetricTV_SHOW",
    "MetricTamper",
    "MetricUSED_VOICE_CHAT",
    "MetricVEHICLE_DIST_DRIVEN",
    "MetricVIDEO_EDITOR_SAVE",
    "MetricVIDEO_EDITOR_UPLOAD",
    "MetricVehicle",
    "MetricWANTED_LEVEL",
    "MetricWEAPON_MOD_CHANGE",
    "MetricWEATHER",
    "MetricWEBSITE_VISITED",
    "MetricXP_LOSS",
    "MouseSettings",
    "NMBehavior",
    "NMBehaviorInst",
    "NMBehaviorPool",
    "NMExtraTunables",
    "NMParam",
    "NMTaskSimpleTunableEntry",
    "NMTuningSetEntry",
    "NMValue",
    "NMValueBool",
    "NMValueFloat",
    "NMValueInt",
    "NMValueString",
    "NMValueVector3",
    "NULLGameTransactionHttpTask",
    "NatTraversal",
    "NetAction",
    "NetQueryFunctions",
    "NetworkBaseConfig",
    "NetworkBettingCloudManager",
    "NetworkClanOp",
    "NetworkClanOp_FriendEventData",
    "NetworkClanOp_InviteRequestData",
    "NetworkCrewEmblemMgr",
    "NetworkGameConfig",
    "NetworkGameFilter",
    "NmRs1DofEffector",
    "NmRs1DofEffectorInputBlendable",
    "NmRs1DofEffectorInputWrapper",
    "NmRs3DofEffector",
    "NmRs3DofEffectorInputBlendable",
    "NmRs3DofEffectorInputWrapper",
    "NmRsArmInputBlendable",
    "NmRsArmInputWrapper",
    "NmRsBody",
    "NmRsCBUAnimPose",
    "NmRsCBUArmsWindmill",
    "NmRsCBUArmsWindmillAdaptive",
    "NmRsCBUBalancerCollisionsReaction",
    "NmRsCBUBodyBalance",
    "NmRsCBUBodyFoetal",
    "NmRsCBUBodyWrithe",
    "NmRsCBUBraceForImpact",
    "NmRsCBUBuoyancy",
    "NmRsCBUCarried",
    "NmRsCBUCatchFall",
    "NmRsCBUDangle",
    "NmRsCBUDynamicBalancer",
    "NmRsCBUElectrocute",
    "NmRsCBUFallOverWall",
    "NmRsCBUFlinch",
    "NmRsCBUGrab",
    "NmRsCBUHeadLook",
    "NmRsCBUInjuredOnGround",
    "NmRsCBUOnFire",
    "NmRsCBUPedal",
    "NmRsCBUPointArm",
    "NmRsCBUPointGun",
    "NmRsCBURollDownStairs",
    "NmRsCBURollUp",
    "NmRsCBUShot",
    "NmRsCBUSpineTwist",
    "NmRsCBUStaggerFall",
    "NmRsCBUTeeter",
    "NmRsCBUYanked",
    "NmRsCharacter",
    "NmRsEffectorBase",
    "NmRsEffectorInputWrapper",
    "NmRsEngine",
    "NmRsHumanArm",
    "NmRsHumanBody",
    "NmRsHumanLeg",
    "NmRsHumanSpine",
    "NmRsIKInputWrapper",
    "NmRsInputWrapperBase",
    "NmRsLegInputBlendable",
    "NmRsLegInputWrapper",
    "NmRsLimb",
    "NmRsSetStiffnessInputWrapper",
    "NmRsSpineInputBlendable",
    "NmRsSpineInputWrapper",
    "NmRsStopAllInputWrapper",
    "NodeCommonDataOperations",
    "ObjVisitor",
    "PNTriangleTessellationGlobals",
    "PTFX_ReplayStreamingRequest",
    "PagedCloudText",
    "PedHeadshotTextureExporter",
    "PlaceHolder",
    "PostMessageTask",
    "PresenceMessageV1",
    "PresenceMessageV2",
    "PrimitiveBase",
    "PrimitiveBox",
    "PrimitiveCapsule",
    "PrimitiveCylinder",
    "PrimitiveSphere",
    "PrimitiveTriangle",
    "ProfileV2",
    "ProjectData",
    "PropDescription",
    "PropertiesCallback",
    "ProxyObserver",
    "PurchGameTransactionHttpTask",
    "PurchTransaction",
    "QueryTask",
    "RagdollFilter",
    "RageDirect3DDevice11",
    "RageDirect3DDeviceContext11",
    "ReadVideoBlockWorker",
    "Receiver",
    "RecordingTask",
    "RecordingTaskWindows",
    "RecoupGameTransactionHttpTask",
    "RefreshCredTask",
    "RegisterTask",
    "RelatedInputs",
    "RenderPhaseSeeThrough",
    "ReplayBicycleExtension",
    "ReplayEntityExtension",
    "ReplayExtensionBase",
    "ReplayGlassExtension",
    "ReplayHUDOverlayExtension",
    "ReplayObjectExtension",
    "ReplayParachuteExtension",
    "ReplayPedExtension",
    "ReplayReticuleExtension",
    "ReplayStreamingRequest",
    "ReplayTrafficLightExtension",
    "ReplayVehicleExtension",
    "ReplayVehicleWithWheelsExtension",
    "ReportStatsTask",
    "ResWorkItem",
    "ResourceData",
    "ResourceSlot",
    "ResourceVisitor",
    "RestrictionTags",
    "RgscDelegate",
    "RightHandWheelBones",
    "RopeVertices",
    "SCTourManager",
    "SGeneralMovieData",
    "SGeneralPauseDataConfig",
    "SMBIOSMachineHashStrategyDuplicate",
    "SRLMounter",
    "SaveHeaderDataWorker",
    "SaveToCloudOp",
    "ScenarioInfoMounter",
    "ScenarioPointMounter",
    "SellVehicleGameTransactionHttpTask",
    "SessionRestartGameTransactionHttpTask",
    "SessionScriptRestartGameTransactionHttpTask",
    "SessionStartGameTransactionHttpTask",
    "SessionStartTransaction",
    "Settings",
    "ShaderVarFrameFilter",
    "ShopPedApparel",
    "ShopPedComponent",
    "ShopPedOutfit",
    "ShopPedProp",
    "ShopVehicleData",
    "ShopVehicleDataArray",
    "ShopVehicleMod",
    "ShopWeaponComponent",
    "ShoreLineQuadTreeIntersectFunction",
    "ShoreLinesQuadTreeUpdateFunction",
    "SocialClubLegalsMenu",
    "SocialClubMenu",
    "SoftRasterizer",
    "Source",
    "SpendEarnTransaction",
    "SpendGameTransactionHttpTask",
    "SpendLimitedServiceGameTransactionHttpTask",
    "SpendVehicleModTransactionHttpTask",
    "StartTask",
    "StateMachine",
    "StaticFrameFilter",
    "StaticInstanceBuffer",
    "SveFileObject",
    "SyncObserver",
    "SyncTagObserver",
    "TagsCallback",
    "TattooShopItem",
    "TattooShopItemArray",
    "TessellationVars",
    "TextDocumentListener",
    "TextureEventHandler",
    "TimeCycleFileMounter",
    "TimedTuning",
    "TrafficLightInfos",
    "TriangleShape",
    "Tunables",
    "TunablesListener",
    "TunnelSocket",
    "TunnelerResult",
    "UICrewLBPage",
    "UICrewLBPaginator",
    "UIDataPageBase",
    "UIFriendsClanPage",
    "UIFriendsClanPaginator",
    "UIGeneralCrewPage",
    "UIGeneralCrewPaginator",
    "UIInvitePage",
    "UIInvitePaginator",
    "UIOpenClanPage",
    "UIPaginator",
    "UIPaginatorBase",
    "UIRequestPage",
    "UIRequestPaginator",
    "UgcCreateRequestNode",
    "UgcRequestNode",
    "UnapprovedCameraLists",
    "UtilityScriptInfo",
    "VehicleAvoidanceTask",
    "VehicleFragImpulseFunction",
    "VehicleFragImpulseRange",
    "VehicleGoToTask",
    "VehicleIntelligenceProcessTask",
    "VehicleInterpolationTask",
    "VfxLightningCloudBurstCommonSettings",
    "VfxLightningCloudBurstSettings",
    "VfxLightningDirectionalBurstSettings",
    "VfxLightningKeyFrames",
    "VfxLightningSettings",
    "VfxLightningStrikeForkPointSettings",
    "VfxLightningStrikeSettings",
    "VfxLightningStrikeSplitPointSettings",
    "VfxLightningStrikeVariationSettings",
    "VfxLightningTimeCycleSettings",
    "VideoEncoderClassFactory",
    "VideoPlaybackThumbnailManagerAdapter",
    "VideoRecordingDataProviderAdapter",
    "VideoRecordingInterface",
    "VideoRecordingInterfaceWindows",
    "VideoUploadPolicyMenu",
    "VoiceChatAudioProvider",
    "WaterSimInterp",
    "WeaponShopItem",
    "WeaponShopItemArray",
    "WideStringStorage",
    "Win32MachineHashStrategyDuplicate",
    "WorkItem",
    "Worker",
    "XMLAttributeStringBuilder",
    "XMLPrefixQuerier",
    "XmlLog",
    "XmlStdOutLog",
    "ZonesQuadTreeUpdateFunction",
    "_Func_base",
    "_Func_impl",
    "_Generic_error_category",
    "_Iostream_error_category",
    "_System_error_category",
    "__non_rtti_object",
    "`anonymous",
    "`private:",
    "`public:",
    "`void",
    "aiMeshStore",
    "aiNavMeshStore",
    "aiNavMeshStoreInterfaceGta",
    "aiSplitArray",
    "aiTask",
    "aiTaskManager",
    "aiTaskStateTransitionTable",
    "aiTaskTree",
    "arrayDataVerifyEvent",
    "atDNetEventNode",
    "atDNetObjectNode",
    "atDNode",
    "atDScriptObjectNode",
    "atDTransactionNode",
    "atReferenceCounter",
    "atSingleton",
    "audAmbientAudioEntity",
    "audAmbientRadioEmitter",
    "audAutomationSound",
    "audBicycleAudioEntity",
    "audBiquadFilterEffect",
    "audBoatAudioEntity",
    "audCachedBrokenGlassTestResults",
    "audCachedCarLandingTestResults",
    "audCachedMultipleTestResults",
    "audCarAudioEntity",
    "audCategoryManager",
    "audCollapsingStereoSound",
    "audCollisionAudioEntity",
    "audCrossfadeSound",
    "audCurveRepository",
    "audCutTrack",
    "audCutTrackCutScene",
    "audCutTrackSynchedScene",
    "audCutsceneAudioEntity",
    "audDecoder",
    "audDecoderAdpcm",
    "audDecoderPcm",
    "audDelayEffect",
    "audDelayEffect4",
    "audDirectionalAmbienceManager",
    "audDirectionalSound",
    "audDoorAudioEntity",
    "audDspEffect",
    "audDynamicEntitySound",
    "audDynamicMixer",
    "audEarlyReflectionEffect",
    "audEmitterAudioEntity",
    "audEntity",
    "audEntityRadioEmitter",
    "audEnvelopeSound",
    "audEnvironmentGroupInterface",
    "audEnvironmentGroupManager",
    "audEnvironmentSound",
    "audExplosionAudioEntity",
    "audExternalStreamSound",
    "audFadeInRadioAction",
    "audFadeOutRadioAction",
    "audFireAudioEntity",
    "audFluctuatorSound",
    "audForceRadioTrackAction",
    "audFrontendAudioEntity",
    "audGameObjectManager",
    "audGlassAudioEntity",
    "audGrainPlayer",
    "audGranularEngineComponent",
    "audGranularSound",
    "audGranularSubmix",
    "audGranularWobble",
    "audGunFightConductor",
    "audGunFightConductorDynamicMixing",
    "audGunFireAudioEntity",
    "audHeliAudioEntity",
    "audIfSound",
    "audInteractiveMusicManager",
    "audKineticSound",
    "audLoopingSound",
    "audMathOperationSound",
    "audMediaReaderPlatform",
    "audMetadataDataFileMounter",
    "audMixerDevice",
    "audModularSynthSound",
    "audMultitrackSound",
    "audMusicAction",
    "audObjectAudioEntity",
    "audObjectModifiedInterface",
    "audOnStopSound",
    "audParameterTransformSound",
    "audPcmSource",
    "audPedAudioEntity",
    "audPlaceableTracker",
    "audPlaneAudioEntity",
    "audPoliceScanner",
    "audRadioAudioEntity",
    "audRadioDjSpeechAction",
    "audRadioEmitter",
    "audRandomizedSound",
    "audRetriggeredOverlappedSound",
    "audReverbEffect4",
    "audScannerManager",
    "audScriptAudioEntity",
    "audSequentialOverlapSound",
    "audSequentialSound",
    "audSetMoodAction",
    "audShoreLine",
    "audShoreLineLake",
    "audShoreLineOcean",
    "audShoreLinePool",
    "audShoreLineRiver",
    "audSimpleSound",
    "audSound",
    "audSoundBase",
    "audSoundFactory",
    "audSoundProcessHierarchyFn",
    "audSoundRecorderInterface",
    "audSourceSubmix",
    "audSpeechAudioEntity",
    "audSpeechManager",
    "audSpeechSound",
    "audStartOneShotAction",
    "audStartTrackAction",
    "audStaticRadioEmitter",
    "audStopOneShotAction",
    "audStopTrackAction",
    "audStreamPlayer",
    "audStreamingSound",
    "audSwitchSound",
    "audTracker",
    "audTrailerAudioEntity",
    "audTrainAudioEntity",
    "audTwinLoopSound",
    "audUnderwaterEffect",
    "audVariableBlockSound",
    "audVariableCurveSound",
    "audVariableDelayEffect",
    "audVariablePrintValueSound",
    "audVehicleAudioEntity",
    "audVehicleConductor",
    "audVehicleConductorDynamicMixing",
    "audVehicleConvertibleRoof",
    "audVehicleDigger",
    "audVehicleElectricEngine",
    "audVehicleEngine",
    "audVehicleEngineComponent",
    "audVehicleForks",
    "audVehicleGadget",
    "audVehicleGadgetMagnet",
    "audVehicleGrapplingHook",
    "audVehicleHandlerFrame",
    "audVehicleReflectionsEntity",
    "audVehicleTowTruckArm",
    "audVehicleTransmission",
    "audVehicleTurbo",
    "audVehicleTurret",
    "audVoiceChatAudioEntity",
    "audVoiceChatAudioProvider",
    "audWMFStreamReader",
    "audWMStreamReader",
    "audWavePlayer",
    "audWeaponAudioEntity",
    "audWeaponInventoryListener",
    "audWeatherAudioEntity",
    "audWrapperSound",
    "bad_alloc",
    "bad_cast",
    "bad_exception",
    "bad_typeid",
    "bgConfig",
    "bgCrackStarMap",
    "bgCrackType",
    "bgFloat2VarData",
    "bgFloat4VarData",
    "bgFloatVarData",
    "bgGlassSize",
    "bgGlassTypeConfig",
    "bgGpuBuffers_Imp",
    "bgPhysics",
    "bgRagePhysics",
    "bgShaderVars",
    "bgSimplePhysics",
    "bgTextureVarData",
    "btAxisSweep3",
    "btOverlappingPairCache",
    "cCommerceCategoryData",
    "cCommerceConsumableManager",
    "cCommerceConsumableTransaction",
    "cCommerceItemData",
    "cCommerceManager",
    "cCommerceProductData",
    "cCommerceSaxReader",
    "cCommerceStringTable",
    "cCommerceUtil",
    "cSCSCommerceConsumableManager",
    "cScsCommerceConsumableTransaction",
    "cStoreTexture",
    "cStoreTextureManager",
    "camAimCamera",
    "camAimCameraMetadata",
    "camAnimSceneDirector",
    "camAnimSceneDirectorMetadata",
    "camAnimatedCamera",
    "camAnimatedCameraMetadata",
    "camAnimatedFrameShaker",
    "camAnimatedShakeMetadata",
    "camBaseCamera",
    "camBaseCameraMetadata",
    "camBaseCinematicContext",
    "camBaseCinematicTrackingCamera",
    "camBaseCinematicTrackingCameraMetadata",
    "camBaseDirector",
    "camBaseFrameShaker",
    "camBaseObject",
    "camBaseObjectMetadata",
    "camBaseSplineCamera",
    "camBaseSplineCameraMetadata",
    "camCameraManShot",
    "camCatchUpHelper",
    "camCatchUpHelperMetadata",
    "camCinematicAnimatedCamera",
    "camCinematicAnimatedCameraMetadata",
    "camCinematicBustedContext",
    "camCinematicBustedContextMetadata",
    "camCinematicBustedShot",
    "camCinematicBustedShotMetadata",
    "camCinematicCamManCamera",
    "camCinematicCameraManCameraMetadata",
    "camCinematicCameraManShotMetadata",
    "camCinematicCameraOperatorShakeSettings",
    "camCinematicCameraOperatorShakeTurbulenceSettings",
    "camCinematicCameraOperatorShakeUncertaintySettings",
    "camCinematicContextMetadata",
    "camCinematicCraningCameraManShotMetadata",
    "camCinematicDirector",
    "camCinematicDirectorMetadata",
    "camCinematicDirectorMetadataAssistedAimingSettings",
    "camCinematicFallFromHeliContext",
    "camCinematicFallFromHeliContextMetadata",
    "camCinematicFallFromHeliShot",
    "camCinematicFallFromHeliShotMetadata",
    "camCinematicFirstPersonIdleCamera",
    "camCinematicFirstPersonIdleCameraMetadata",
    "camCinematicGroupCamera",
    "camCinematicGroupCameraMetadata",
    "camCinematicHeliChaseCamera",
    "camCinematicHeliChaseCameraMetadata",
    "camCinematicHeliTrackingShotMetadata",
    "camCinematicIdleCamera",
    "camCinematicIdleCameraMetadata",
    "camCinematicIdleShots",
    "camCinematicInTrainAtStationContext",
    "camCinematicInTrainAtStationContextMetadata",
    "camCinematicInTrainContext",
    "camCinematicInTrainContextMetadata",
    "camCinematicInTrainShotMetadata",
    "camCinematicInVehicleContext",
    "camCinematicInVehicleContextMetadata",
    "camCinematicInVehicleConvertibleRoofContext",
    "camCinematicInVehicleConvertibleRoofContextMetadata",
    "camCinematicInVehicleCrashContext",
    "camCinematicInVehicleCrashContextMetadata",
    "camCinematicInVehicleCrashShot",
    "camCinematicInVehicleCrashShotMetadata",
    "camCinematicInVehicleFirstPersonContext",
    "camCinematicInVehicleFirstPersonContextMetadata",
    "camCinematicInVehicleMultiplayerPassengerContext",
    "camCinematicInVehicleMultiplayerPassengerContextMetadata",
    "camCinematicInVehicleOverriddenFirstPersonContext",
    "camCinematicInVehicleOverriddenFirstPersonContextMetadata",
    "camCinematicInVehicleWantedContext",
    "camCinematicInVehicleWantedContextMetadata",
    "camCinematicMeleeShotMetadata",
    "camCinematicMissileKillContext",
    "camCinematicMissileKillContextMetadata",
    "camCinematicMissileKillShot",
    "camCinematicMissileKillShotMetadata",
    "camCinematicMountedCamera",
    "camCinematicMountedCameraMetadata",
    "camCinematicMountedCameraMetadataFirstPersonPitchOffset",
    "camCinematicMountedCameraMetadataFirstPersonRoll",
    "camCinematicMountedCameraMetadataLeadingLookSettings",
    "camCinematicMountedCameraMetadataLookAroundSettings",
    "camCinematicMountedCameraMetadataMovementOnAccelerationSettings",
    "camCinematicMountedCameraMetadataOrientationSpring",
    "camCinematicMountedCameraMetadataRelativePitchScalingToThrottle",
    "camCinematicMountedPartCamera",
    "camCinematicMountedPartCameraMetadata",
    "camCinematicOnFootAssistedAimingContext",
    "camCinematicOnFootAssistedAimingContextMetadata",
    "camCinematicOnFootAssistedAimingKillShot",
    "camCinematicOnFootAssistedAimingKillShotMetadata",
    "camCinematicOnFootAssistedAimingReactionShot",
    "camCinematicOnFootAssistedAimingReactionShotMetadata",
    "camCinematicOnFootFirstPersonIdleShot",
    "camCinematicOnFootFirstPersonIdleShotMetadata",
    "camCinematicOnFootIdleContext",
    "camCinematicOnFootIdleContextMetadata",
    "camCinematicOnFootIdleShot",
    "camCinematicOnFootIdleShotMetadata",
    "camCinematicOnFootMeleeContext",
    "camCinematicOnFootMeleeContextMetadata",
    "camCinematicOnFootMeleeShot",
    "camCinematicOnFootMeleeShotMetadata",
    "camCinematicOnFootSpectatingContext",
    "camCinematicOnFootSpectatingContextMetadata",
    "camCinematicOnFootSpectatingShot",
    "camCinematicOnFootSpectatingShotMetadata",
    "camCinematicParachuteCameraManShot",
    "camCinematicParachuteCameraManShotMetadata",
    "camCinematicParachuteContext",
    "camCinematicParachuteContextMetadata",
    "camCinematicParachuteHeliShot",
    "camCinematicParachuteHeliShotMetadata",
    "camCinematicPassengerShot",
    "camCinematicPedCloseUpCamera",
    "camCinematicPedCloseUpCameraMetadata",
    "camCinematicPoliceCarMountedShotMetadata",
    "camCinematicPoliceExitVehicleShotMetadata",
    "camCinematicPoliceHeliMountedShotMetadata",
    "camCinematicPoliceInCoverShotMetadata",
    "camCinematicPoliceRoadBlockShot",
    "camCinematicPoliceRoadBlockShotMetadata",
    "camCinematicPositionCamera",
    "camCinematicPositionCameraMetadata",
    "camCinematicScriptContext",
    "camCinematicScriptContextMetadata",
    "camCinematicScriptRaceCheckPointShot",
    "camCinematicScriptRaceCheckPointShotMetadata",
    "camCinematicScriptedMissionCreatorFailContext",
    "camCinematicScriptedMissionCreatorFailContextMetadata",
    "camCinematicScriptedRaceCheckPointContext",
    "camCinematicScriptedRaceCheckPointContextMetadata",
    "camCinematicShotMetadata",
    "camCinematicShots",
    "camCinematicSpectatorNewsChannelContext",
    "camCinematicSpectatorNewsChannelContextMetadata",
    "camCinematicStuntCamera",
    "camCinematicStuntCameraMetadata",
    "camCinematicStuntJumpContext",
    "camCinematicStuntJumpContextMetadata",
    "camCinematicStuntJumpShot",
    "camCinematicStuntJumpShotMetadata",
    "camCinematicTrainPassengerShotMetadata",
    "camCinematicTrainRoofMountedShotMetadata",
    "camCinematicTrainRoofShot",
    "camCinematicTrainStationShot",
    "camCinematicTrainStationShotMetadata",
    "camCinematicTrainTrackCamera",
    "camCinematicTrainTrackShot",
    "camCinematicTrainTrackShotMetadata",
    "camCinematicTrainTrackingCameraMetadata",
    "camCinematicTwoShotCamera",
    "camCinematicTwoShotCameraMetadata",
    "camCinematicVehicleBonnetShot",
    "camCinematicVehicleBonnetShotMetadata",
    "camCinematicVehicleConvertibleRoofShot",
    "camCinematicVehicleConvertibleRoofShotMetadata",
    "camCinematicVehicleGroupShot",
    "camCinematicVehicleGroupShotMetadata",
    "camCinematicVehicleLowOrbitCamera",
    "camCinematicVehicleLowOrbitCameraMetadata",
    "camCinematicVehicleLowOrbitShotMetadata",
    "camCinematicVehicleOrbitCamera",
    "camCinematicVehicleOrbitCameraInitalSettings",
    "camCinematicVehicleOrbitCameraMetadata",
    "camCinematicVehicleOrbitShotMetadata",
    "camCinematicVehiclePartShot",
    "camCinematicVehiclePartShotMetadata",
    "camCinematicVehicleTrackingCamera",
    "camCinematicVehicleTrackingCameraMetadata",
    "camCinematicWaterCrashCamera",
    "camCinematicWaterCrashCameraMetadata",
    "camCinematicWaterCrashContext",
    "camCinematicWaterCrashContextMetadata",
    "camCinematicWaterCrashShot",
    "camCinematicWaterCrashShotMetadata",
    "camCollision",
    "camCollisionMetadata",
    "camCollisionMetadataBuoyancySettings",
    "camCollisionMetadataClippingAvoidance",
    "camCollisionMetadataOcclusionSweep",
    "camCollisionMetadataOrbitDistanceDamping",
    "camCollisionMetadataPathFinding",
    "camCollisionMetadataPullBackTowardsCollision",
    "camCollisionMetadataPushBeyondEntitiesIfClipping",
    "camCollisionMetadataRotationTowardsLos",
    "camControlHelper",
    "camControlHelperMetaDataPrecisionAimSettings",
    "camControlHelperMetadata",
    "camControlHelperMetadataLookAround",
    "camControlHelperMetadataViewModeSettings",
    "camControlHelperMetadataViewModes",
    "camControlHelperMetadataZoom",
    "camCraningCameraManShot",
    "camCustomTimedSplineCamera",
    "camCustomTimedSplineCameraMetadata",
    "camCutsceneDirector",
    "camCutsceneDirectorMetadata",
    "camDebugDirector",
    "camDebugDirectorMetadata",
    "camDepthOfFieldSettingsMetadata",
    "camEnvelope",
    "camEnvelopeMetadata",
    "camFactoryHelper",
    "camFactoryHelperBase",
    "camFactoryHelperPooled",
    "camFirstPersonAimCamera",
    "camFirstPersonAimCameraMetadata",
    "camFirstPersonAimCameraMetadataHeadingCorrection",
    "camFirstPersonHeadTrackingAimCamera",
    "camFirstPersonHeadTrackingAimCameraMetadata",
    "camFirstPersonPedAimCamera",
    "camFirstPersonPedAimCameraMetadata",
    "camFirstPersonShooterCamera",
    "camFirstPersonShooterCameraMetadata",
    "camFirstPersonShooterCameraMetadataCoverSettings",
    "camFirstPersonShooterCameraMetadataOrientationSpring",
    "camFirstPersonShooterCameraMetadataOrientationSpringLite",
    "camFirstPersonShooterCameraMetadataRelativeAttachOrientationSettings",
    "camFirstPersonShooterCameraMetadataSprintBreakOutSettings",
    "camFirstPersonShooterCameraMetadataStickyAim",
    "camFollowCamera",
    "camFollowCameraMetadata",
    "camFollowCameraMetadataFollowOrientationConing",
    "camFollowCameraMetadataHighAltitudeZoomSettings",
    "camFollowCameraMetadataPullAroundSettings",
    "camFollowCameraMetadataRollSettings",
    "camFollowObjectCamera",
    "camFollowObjectCameraMetadata",
    "camFollowParachuteCamera",
    "camFollowParachuteCameraMetadata",
    "camFollowParachuteCameraMetadataCustomSettings",
    "camFollowPedCamera",
    "camFollowPedCameraMetadata",
    "camFollowPedCameraMetadataAssistedMovementAlignment",
    "camFollowPedCameraMetadataCustomViewModeSettings",
    "camFollowPedCameraMetadataDivingShakeSettings",
    "camFollowPedCameraMetadataHighFallShakeSettings",
    "camFollowPedCameraMetadataLadderAlignment",
    "camFollowPedCameraMetadataOrbitPitchLimitsForOverheadCollision",
    "camFollowPedCameraMetadataPushBeyondNearbyVehiclesInRagdollSettings",
    "camFollowPedCameraMetadataRappellingAlignment",
    "camFollowPedCameraMetadataRunningShakeSettings",
    "camFollowPedCameraMetadataSwimmingShakeSettings",
    "camFollowVehicleCamera",
    "camFollowVehicleCameraMetadata",
    "camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettings",
    "camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettingsCapsuleSettings",
    "camFollowVehicleCameraMetadataHandBrakeSwingSettings",
    "camFollowVehicleCameraMetadataHighSpeedShakeSettings",
    "camFollowVehicleCameraMetadataHighSpeedZoomSettings",
    "camFollowVehicleCameraMetadataVerticalFlightModeSettings",
    "camFollowVehicleCameraMetadataWaterEntryShakeSettings",
    "camFrame",
    "camFrameInterpolator",
    "camFreeCameraMetadata",
    "camGameplayDirector",
    "camGameplayDirectorMetadata",
    "camGameplayDirectorMetadataExplosionShakeSettings",
    "camGameplayDirectorMetadataVehicleCustomSettings",
    "camHeliTrackingShot",
    "camHintHelper",
    "camHintHelperMetadata",
    "camHintHelperMetadataPivotPositionAdditive",
    "camInconsistentBehaviourZoomHelper",
    "camInconsistentBehaviourZoomHelperAirborneSettings",
    "camInconsistentBehaviourZoomHelperBaseSettings",
    "camInconsistentBehaviourZoomHelperDetectFastCameraTurnSettings",
    "camInconsistentBehaviourZoomHelperDetectSuddenMovementSettings",
    "camInconsistentBehaviourZoomHelperLosSettings",
    "camInconsistentBehaviourZoomHelperMetadata",
    "camLongSwoopSwitchHelper",
    "camLongSwoopSwitchHelperMetadata",
    "camLookAheadHelper",
    "camLookAheadHelperMetadata",
    "camLookAtDampingHelper",
    "camLookAtDampingHelperMetadata",
    "camMarketingAToBCameraMetadata",
    "camMarketingDirector",
    "camMarketingDirectorMetadata",
    "camMarketingDirectorMetadataMode",
    "camMarketingFreeCameraMetadata",
    "camMarketingFreeCameraMetadataInputResponse",
    "camMarketingMountedCameraMetadata",
    "camMarketingOrbitCameraMetadata",
    "camMarketingStickyCameraMetadata",
    "camMetadataStore",
    "camMotionBlurSettingsMetadata",
    "camNearClipScanner",
    "camNearClipScannerMetadata",
    "camOscillatingFrameShaker",
    "camOscillator",
    "camOscillatorMetadata",
    "camPoliceCarMountedShot",
    "camPoliceExitVehicleShot",
    "camPoliceHeliMountedShot",
    "camPoliceInCoverShot",
    "camPreferredShotSelectionType",
    "camReplayBaseCamera",
    "camReplayBaseCameraMetadata",
    "camReplayBaseCameraMetadataCollisionSettings",
    "camReplayBaseCameraMetadataInputResponse",
    "camReplayDirector",
    "camReplayDirectorMetadata",
    "camReplayFreeCamera",
    "camReplayFreeCameraMetadata",
    "camReplayPresetCamera",
    "camReplayPresetCameraMetadata",
    "camReplayRecordedCamera",
    "camReplayRecordedCameraMetadata",
    "camRoundedSplineCamera",
    "camRoundedSplineCameraMetadata",
    "camScriptDirector",
    "camScriptDirectorMetadata",
    "camScriptedCamera",
    "camScriptedCameraMetadata",
    "camScriptedFlyCamera",
    "camScriptedFlyCameraMetadata",
    "camScriptedFlyCameraMetadataInputResponse",
    "camSeatSpecificCameras",
    "camShakeMetadata",
    "camShakeMetadataFrameComponent",
    "camShortRotationSwitchHelper",
    "camShortRotationSwitchHelperMetadata",
    "camShortTranslationSwitchHelper",
    "camShortTranslationSwitchHelperMetadata",
    "camShortZoomInOutSwitchHelper",
    "camShortZoomInOutSwitchHelperMetadata",
    "camShortZoomToHeadSwitchHelper",
    "camShortZoomToHeadSwitchHelperMetadata",
    "camSmoothedSplineCamera",
    "camSmoothedSplineCameraMetadata",
    "camSpeedRelativeShakeSettingsMetadata",
    "camSpringMount",
    "camSpringMountMetadata",
    "camSwitchCamera",
    "camSwitchCameraMetadata",
    "camSwitchDirector",
    "camSwitchDirectorMetadata",
    "camSyncedSceneDirector",
    "camSyncedSceneDirectorMetadata",
    "camThirdPersonAimCamera",
    "camThirdPersonAimCameraMetadata",
    "camThirdPersonCamera",
    "camThirdPersonCameraMetadata",
    "camThirdPersonCameraMetadataBasePivotPosition",
    "camThirdPersonCameraMetadataBasePivotPositionRollSettings",
    "camThirdPersonCameraMetadataBuoyancySettings",
    "camThirdPersonCameraMetadataCollisionFallBackPosition",
    "camThirdPersonCameraMetadataCustomBoundingBoxSettings",
    "camThirdPersonCameraMetadataLookOverSettings",
    "camThirdPersonCameraMetadataPivotOverBoungingBoxSettings",
    "camThirdPersonCameraMetadataPivotPosition",
    "camThirdPersonCameraMetadataQuadrupedalHeightSpring",
    "camThirdPersonCameraMetadataStealthZoomSettings",
    "camThirdPersonCameraMetadataVehicleOnTopOfVehicleCollisionSettings",
    "camThirdPersonFrameInterpolator",
    "camThirdPersonPedAimCamera",
    "camThirdPersonPedAimCameraMetadata",
    "camThirdPersonPedAimCameraMetadataLockOnOrbitDistanceSettings",
    "camThirdPersonPedAimCameraMetadataLockOnTargetDampingSettings",
    "camThirdPersonPedAimInCoverCamera",
    "camThirdPersonPedAimInCoverCameraMetadata",
    "camThirdPersonPedAimInCoverCameraMetadataAimingSettings",
    "camThirdPersonPedAimInCoverCameraMetadataLowCoverSettings",
    "camThirdPersonPedAssistedAimCamera",
    "camThirdPersonPedAssistedAimCameraCinematicMomentSettings",
    "camThirdPersonPedAssistedAimCameraInCoverSettings",
    "camThirdPersonPedAssistedAimCameraLockOnAlignmentSettings",
    "camThirdPersonPedAssistedAimCameraMetadata",
    "camThirdPersonPedAssistedAimCameraPivotScalingSettings",
    "camThirdPersonPedAssistedAimCameraPlayerFramingSettings",
    "camThirdPersonPedAssistedAimCameraRecoilShakeScalingSettings",
    "camThirdPersonPedAssistedAimCameraRunningShakeSettings",
    "camThirdPersonPedAssistedAimCameraShakeActivityScalingSettings",
    "camThirdPersonPedAssistedAimCameraShootingFocusSettings",
    "camThirdPersonPedMeleeAimCamera",
    "camThirdPersonPedMeleeAimCameraMetadata",
    "camThirdPersonVehicleAimCamera",
    "camThirdPersonVehicleAimCameraMetadata",
    "camTimedSplineCamera",
    "camTimedSplineCameraMetadata",
    "camVehicleCustomSettingsMetadata",
    "camVehicleCustomSettingsMetadataAdditionalBoundScalingVehicleSettings",
    "camVehicleCustomSettingsMetadataDoorAlignmentSettings",
    "camVehicleCustomSettingsMetadataExitSeatPhaseForCameraExitSettings",
    "camVehicleCustomSettingsMetadataInvalidCinematcShotsRefsForVehicleSettings",
    "camVehicleCustomSettingsMetadataMultiplayerPassengerCameraHashSettings",
    "camVehicleCustomSettingsMetadataSeatSpecficCameras",
    "camVehicleLowOrbitShot",
    "camVehicleOrbitShot",
    "charNode",
    "characterCloth",
    "characterClothController",
    "characterClothDebug",
    "clothBridgeSimGfx",
    "clothController",
    "clothInstance",
    "clothInstanceTaskManager",
    "clothInstanceTuning",
    "clothManager",
    "clothVertexBlend",
    "crAnimDictionary",
    "crAnimation",
    "crClip",
    "crClipAnimation",
    "crClipAnimationExpression",
    "crClipAnimations",
    "crClipDictionary",
    "crCreatureComponent",
    "crCreatureComponentCamera",
    "crCreatureComponentEvent",
    "crCreatureComponentExtraDofs",
    "crCreatureComponentLight",
    "crCreatureComponentMover",
    "crCreatureComponentParticleEffect",
    "crCreatureComponentPhysical",
    "crCreatureComponentRoot",
    "crCreatureComponentShaderVars",
    "crCreatureComponentSkeleton",
    "crCreatureComponentTelemetry",
    "crExpressions",
    "crFrameBuffer",
    "crFrameBufferFrameData",
    "crFrameCompositor",
    "crFrameCompositorFrame",
    "crFrameDataInitializer",
    "crFrameDataInitializerAnimation",
    "crFrameDataInitializerBoneAndMover",
    "crFrameDataInitializerCreature",
    "crFrameDataInitializerDofs",
    "crFrameDataInitializerFrameData",
    "crFrameDataInitializerMover",
    "crFrameFilter",
    "crFrameFilterBone",
    "crFrameFilterBoneBasic",
    "crFrameFilterBoneMultiWeight",
    "crFrameFilterDictionaryStore",
    "crFrameFilterMover",
    "crFrameFilterMultiWeight",
    "crFrameFilterTrackMultiWeight",
    "crIKSolverArms",
    "crIKSolverBase",
    "crIKSolverLegs",
    "crJointData",
    "crProperty",
    "crPropertyAttribute",
    "crPropertyAttributeBitSet",
    "crPropertyAttributeBool",
    "crPropertyAttributeData",
    "crPropertyAttributeFloat",
    "crPropertyAttributeHashString",
    "crPropertyAttributeInt",
    "crPropertyAttributeMatrix34",
    "crPropertyAttributeQuaternion",
    "crPropertyAttributeSituation",
    "crPropertyAttributeString",
    "crPropertyAttributeVector3",
    "crPropertyAttributeVector4",
    "crSkeletonData",
    "crTag",
    "crWeightModifier",
    "crWeightModifierSlowInSlowOut",
    "crWeightSet",
    "crmtDestructor",
    "crmtIterator",
    "crmtNode",
    "crmtNodeAddN",
    "crmtNodeAddSubtract",
    "crmtNodeAnimation",
    "crmtNodeBlend",
    "crmtNodeBlendN",
    "crmtNodeCapture",
    "crmtNodeClip",
    "crmtNodeExpression",
    "crmtNodeExtrapolate",
    "crmtNodeFilter",
    "crmtNodeFrame",
    "crmtNodeIdentity",
    "crmtNodeIk",
    "crmtNodeInvalid",
    "crmtNodeJointLimit",
    "crmtNodeMerge",
    "crmtNodeMergeN",
    "crmtNodeMirror",
    "crmtNodeN",
    "crmtNodePair",
    "crmtNodePairWeighted",
    "crmtNodeParent",
    "crmtNodePm",
    "crmtNodePose",
    "crmtNodeProxy",
    "crmtObserver",
    "crmtObserverTyped",
    "crmtRefreshIterator",
    "crmtRequest",
    "crmtRequestBlend",
    "crmtRequestCapture",
    "crmtRequestClip",
    "crmtRequestExpression",
    "crmtRequestFilter",
    "crmtRequestFrame",
    "crmtRequestIk",
    "crmtRequestMerge",
    "crmtRequestPose",
    "crmtRequestSource",
    "crmtSynchronizer",
    "crmtSynchronizerPhase",
    "crmtSynchronizerTag",
    "crpmAngle",
    "crpmAngleRadians",
    "crpmMotionController",
    "crpmMotionControllerClip",
    "crpmMotionControllerRc",
    "crpmParameterSampler",
    "crpmParameterSamplerClipName",
    "crpmParameterSamplerClipProperty",
    "crpmParameterSamplerCombiner",
    "crpmParameterSamplerContainer",
    "crpmParameterSamplerDirectional",
    "crpmParameterSamplerLocomotion",
    "crpmParameterSamplerPhysical",
    "crpmParameterSamplerSpatial",
    "cutfAnimatedLightObject",
    "cutfAnimatedParticleEffectObject",
    "cutfAnimationManagerObject",
    "cutfAssetManagerObject",
    "cutfAttachmentEventArgs",
    "cutfAttribute",
    "cutfAttributeBool",
    "cutfAttributeFloat",
    "cutfAttributeInt",
    "cutfAttributeString",
    "cutfAudioObject",
    "cutfBlockingBoundsObject",
    "cutfBoolValueEventArgs",
    "cutfCameraCutCharacterLightParams",
    "cutfCameraCutEventArgs",
    "cutfCameraCutTimeOfDayDofModifier",
    "cutfCameraObject",
    "cutfCascadeShadowEventArgs",
    "cutfCutsceneFile2",
    "cutfDecalEventArgs",
    "cutfDecalObject",
    "cutfEvent",
    "cutfEventArgs",
    "cutfEventArgsDef",
    "cutfEventArgsList",
    "cutfEventDef",
    "cutfEventDefs",
    "cutfEventObject",
    "cutfFinalNameEventArgs",
    "cutfFinalNamedObject",
    "cutfFindModelObject",
    "cutfFixupModelObject",
    "cutfFloatBoolValueEventArgs",
    "cutfFloatValueEventArgs",
    "cutfHiddenModelObject",
    "cutfLightObject",
    "cutfLoadSceneEventArgs",
    "cutfModelObject",
    "cutfNameEventArgs",
    "cutfNamedAnimatedObject",
    "cutfNamedAnimatedStreamedObject",
    "cutfNamedObject",
    "cutfNamedStreamedObject",
    "cutfObject",
    "cutfObjectIdEvent",
    "cutfObjectIdEventArgs",
    "cutfObjectIdListEvent",
    "cutfObjectIdListEventArgs",
    "cutfObjectIdNameEventArgs",
    "cutfObjectIdPartialHashEventArgs",
    "cutfObjectVariationEventArgs",
    "cutfOverlayObject",
    "cutfParticleEffectObject",
    "cutfPedModelObject",
    "cutfPlayParticleEffectEventArgs",
    "cutfPropModelObject",
    "cutfRayfireObject",
    "cutfRemovalBoundsObject",
    "cutfScreenFadeEventArgs",
    "cutfScreenFadeObject",
    "cutfSubtitleEventArgs",
    "cutfSubtitleObject",
    "cutfTriggerLightEffectEventArgs",
    "cutfTwoFloatValuesEventArgs",
    "cutfVehicleExtraEventArgs",
    "cutfVehicleModelObject",
    "cutfVehicleVariationEventArgs",
    "cutfWeaponModelObject",
    "cutsAnimationEventArgs",
    "cutsAnimationManagerEntity",
    "cutsClipEventArgs",
    "cutsDictionaryLoadedEventArgs",
    "cutsDualAnimationEventArgs",
    "cutsDualClipAnimEventArgs",
    "cutsDualClipEventArgs",
    "cutsEntity",
    "cutsManager",
    "cutsUniqueEntity",
    "cutsUpdateEventArgs",
    "datBase",
    "datSaxReader",
    "datSerialize",
    "decalCallbacks",
    "decalShader",
    "decalShader_Dynamic",
    "decalShader_Static",
    "dlDrawCommandBuffer",
    "dlDrawListMgr",
    "environmentCloth",
    "error_category",
    "evtInstance",
    "evtSet",
    "exception",
    "fiAsciiTokenizer",
    "fiBaseTokenizer",
    "fiCachedDevice",
    "fiDevice",
    "fiDeviceCloud",
    "fiDeviceCount",
    "fiDeviceCrc",
    "fiDeviceGrowBuffer",
    "fiDeviceLocal",
    "fiDeviceMemory",
    "fiDeviceRelative",
    "fiDeviceReplay",
    "fiDeviceTcpIp",
    "fiEncryptingDevice",
    "fiPackfile",
    "fiSerialize",
    "fiTokenizer",
    "fragAnimEventInstance",
    "fragCacheAllocator",
    "fragCacheManager",
    "fragDamageEventInstance",
    "fragDrawable",
    "fragInst",
    "fragInstGta",
    "fragInstNM",
    "fragInstNMGta",
    "fragManager",
    "fragPaneFrameBrokenEventInstance",
    "fragPhysicsLOD",
    "fragPhysicsLODGroup",
    "fragSnuffEventInstance",
    "fragTuneBreakPreset",
    "fragTuneStruct",
    "fragType",
    "fragTypeChild",
    "fwAltSkeletonExtension",
    "fwAnimDirector",
    "fwAnimDirectorComponent",
    "fwAnimDirectorComponentCreature",
    "fwAnimDirectorComponentCreaturePooledObject",
    "fwAnimDirectorComponentExpressions",
    "fwAnimDirectorComponentExpressionsPooledObject",
    "fwAnimDirectorComponentFacialRig",
    "fwAnimDirectorComponentFacialRigPooledObject",
    "fwAnimDirectorComponentMotionTree",
    "fwAnimDirectorComponentMotionTreePooledObject",
    "fwAnimDirectorComponentMove",
    "fwAnimDirectorComponentMovePooledObject",
    "fwAnimDirectorComponentRagDoll",
    "fwAnimDirectorComponentRagDollPooledObject",
    "fwAnimDirectorComponentSyncedScene",
    "fwAnimDirectorComponentSyncedScenePooledObject",
    "fwAnimDirectorPooledObject",
    "fwAnimManager",
    "fwArchetype",
    "fwArchetypeDef",
    "fwArchetypeDynamicFactory",
    "fwArchetypeExtensionFactory",
    "fwArchetypeStreamingModule",
    "fwAssetRscStore",
    "fwAssetStore",
    "fwAudioAnimHandlerInterface",
    "fwAudioEntity",
    "fwBoxStreamer",
    "fwBoxStreamerInterfaceNew",
    "fwBoxStreamerVariable",
    "fwCameraRelativeExtension",
    "fwClipDictionaryBuildMetadata",
    "fwClipDictionaryStore",
    "fwClipDictionaryStoreGameInterface",
    "fwClipItem",
    "fwClipItemWithProps",
    "fwClipRpfBuildMetadata",
    "fwClipSet",
    "fwClipSetWithGetup",
    "fwClothCollisionsExtension",
    "fwClothStore",
    "fwConfig",
    "fwConfigManager",
    "fwCustomShaderEffect",
    "fwCustomShaderEffectBaseType",
    "fwDecorator",
    "fwDecoratorExtension",
    "fwDecoratorInterface",
    "fwDirectedClipItemWithProps",
    "fwDrawData",
    "fwDrawableStore",
    "fwDwdStore",
    "fwEntity",
    "fwEntityDef",
    "fwEvent",
    "fwEventQueue",
    "fwExtensibleBase",
    "fwExtension",
    "fwExtensionDef",
    "fwExtensionPoolFactory",
    "fwExtraTextFiles",
    "fwExtraTextPackage",
    "fwFactoryBase",
    "fwFragmentStore",
    "fwFsm",
    "fwGameInterface",
    "fwIBAllocator",
    "fwInstancedMapData",
    "fwMapData",
    "fwMapDataContents",
    "fwMapDataStore",
    "fwMapTypes",
    "fwMapTypesContents",
    "fwMapTypesStore",
    "fwMetaDataStore",
    "fwMove",
    "fwMoveNetworkDefs",
    "fwMoveNetworkInterface",
    "fwMoveNetworkPlayer",
    "fwNavMeshStoreInterface",
    "fwNetworkDefStore",
    "fwPathServerGameInterface",
    "fwPathServerThread",
    "fwPedGenNavMeshIterator",
    "fwPoolInstanceBuffer",
    "fwPoseMatcherStore",
    "fwQuadTreeFn",
    "fwRecoilEffect",
    "fwRefAwareBaseImpl",
    "fwRenderPhase",
    "fwRenderThreadGameInterface",
    "fwRenderThreadInterface",
    "fwSceneInterface",
    "fwSceneUpdateExtension",
    "fwScriptGuid",
    "fwStaticBoundsStore",
    "fwStaticBoundsStoreInterface",
    "fwSyncedSceneAudioInterface",
    "fwTexLodInterface",
    "fwTextAsset",
    "fwTextDatabaseEntry",
    "fwTextDatabaseSource",
    "fwTextField",
    "fwTextStore",
    "fwTxdStore",
    "fwWantedLightEffect",
    "fwWaypointRecordingRoute",
    "fwWorldRepBase",
    "fwWorldRepMulti",
    "gameSkeleton",
    "grcAdapter",
    "grcAdapterD3D11",
    "grcAdapterManager",
    "grcAdapterManagerD3D11",
    "grcBufferEditor",
    "grcBufferedStaticInstanceBufferList",
    "grcComputeProgram",
    "grcDomainProgram",
    "grcFragmentProgram",
    "grcGeometryProgram",
    "grcHullProgram",
    "grcIndexBuffer",
    "grcIndexBufferD3D11",
    "grcInstanceBuffer",
    "grcInstanceBufferBasic",
    "grcInstanceBufferList",
    "grcMaterialLibrary",
    "grcProgram",
    "grcRenderTarget",
    "grcRenderTargetDX11",
    "grcRenderTargetPC",
    "grcResourceCache",
    "grcSetup",
    "grcStaticInstanceBufferList",
    "grcTexture",
    "grcTextureDX11",
    "grcTextureFactory",
    "grcTextureFactoryDX11",
    "grcTextureFactoryPC",
    "grcTexturePC",
    "grcTextureReference",
    "grcTextureReferenceBase",
    "grcVec4BufferInstanceBufferList",
    "grcVertexBuffer",
    "grcVertexBufferD3D11",
    "grcVertexBufferEditor",
    "grcVertexProgram",
    "grmGeometry",
    "grmGeometryQB",
    "grmModel",
    "grmModelFactory",
    "grmShaderFactory",
    "grmShaderFactoryStandard",
    "grmShaderGroup",
    "gtaDrawable",
    "gtaFragType",
    "iReplayInterface",
    "ioActuatorEffect",
    "ioAcutatorDevice",
    "ioConstantLightEffect",
    "ioLightDevice",
    "ioLightEffect",
    "ioLogitechLedDevice",
    "ioPad",
    "ioPadActuatorDevice",
    "ioRumbleEffect",
    "length_error",
    "logic_error",
    "miniheapAllocator",
    "mvActiveTransition",
    "mvExitParameter",
    "mvMotionWeb",
    "mvNetwork",
    "mvNetworkDef",
    "mvNodeState",
    "mvNodeStateMachine",
    "mvNodeStateRoot",
    "mvNodeSubNetwork",
    "mvObserver",
    "mvRequestStateRoot",
    "mvSetFromParameterBuffer",
    "mvSubNetwork",
    "mvSyncObserver",
    "mvSyncTagObserver",
    "mvSynchronizerPhaseAdd",
    "mvSynchronizerPhaseBlend",
    "mvSynchronizerPhaseMerge",
    "mvSynchronizerPhaseNway",
    "mvSynchronizerPhaseNwayAdd",
    "mvSynchronizerTag",
    "mvSynchronizerTagAdd",
    "mvSynchronizerTagBlend",
    "mvSynchronizerTagMerge",
    "mvSynchronizerTagNway",
    "mvSynchronizerTagNwayAdd",
    "mvTransitionFrameFilter",
    "mvUpdateEventFromClipTag",
    "mvUpdateParameterBuffer",
    "mvUpdateParameterFromEvent",
    "mvUpdateParameterFromOperation",
    "mvUpdateProxyParameter",
    "mvWeightModifierSlowInSlowOut",
    "naAnimHandler",
    "naAudioEntity",
    "naEnvironmentGroup",
    "naEnvironmentGroupManager",
    "naOcclusionPortalInfo",
    "netArrayHandler",
    "netArrayHandlerBase",
    "netArrayIdentifierBase",
    "netArrayManager",
    "netBandwidthMgr",
    "netBlender",
    "netBlenderLinInterp",
    "netBroadcastDataArrayIdentifier",
    "netCatalog",
    "netCatalogBaseItem",
    "netCatalogCache",
    "netCatalogGeneralItem",
    "netCatalogInventoryItem",
    "netCatalogOnlyItem",
    "netCatalogOnlyItemWithStat",
    "netCatalogPackedStatInventoryItem",
    "netCatalogServiceItem",
    "netCatalogServiceLimitedItem",
    "netCatalogServiceWithThresholdItem",
    "netCloudRequestDeleteMemberFile",
    "netCloudRequestGetCrewFile",
    "netCloudRequestGetFile",
    "netCloudRequestGetGlobalFile",
    "netCloudRequestGetMemberFile",
    "netCloudRequestGetTitleFile",
    "netCloudRequestGetUgcFile",
    "netCloudRequestHelper",
    "netCloudRequestPostMemberFile",
    "netConnection",
    "netConnectionManager",
    "netDefferedGamePresenceEventIntf",
    "netEventAckReceived",
    "netEventBandwidthExceeded",
    "netEventBase",
    "netEventConnectionClosed",
    "netEventConnectionError",
    "netEventConnectionEstablished",
    "netEventConnectionReassigned",
    "netEventConnectionRequested",
    "netEventFrameReceived",
    "netEventOutOfMemory",
    "netFireAndForgetTask",
    "netGameEvent",
    "netGameObjectBase",
    "netGameObjectWrapper",
    "netGamePresenceEvent",
    "netHostBroadcastDataHandlerBase",
    "netHttpFilter",
    "netINodeDataAccessor",
    "netInventoryBaseItem",
    "netInventoryPackedStatsItem",
    "netLeaderboardRead",
    "netLeaderboardReadByGamerByPlatformTask",
    "netLeaderboardReadClanMembersByRadius",
    "netLeaderboardReadClanMembersByRank",
    "netLeaderboardReadClanMembersByRow",
    "netLeaderboardReadClanMembersByScoreFloat",
    "netLeaderboardReadClanMembersByScoreInt",
    "netLeaderboardReadClansByRadius",
    "netLeaderboardReadClansByRank",
    "netLeaderboardReadClansByRow",
    "netLeaderboardReadClansByScoreFloat",
    "netLeaderboardReadClansByScoreInt",
    "netLeaderboardReadGamersByRadius",
    "netLeaderboardReadGamersByRank",
    "netLeaderboardReadGamersByRow",
    "netLeaderboardReadGamersByScoreFloat",
    "netLeaderboardReadGamersByScoreInt",
    "netLeaderboardReadGamersInGroupsByRank",
    "netLeaderboardReadGamersInGroupsByScoreFloat",
    "netLeaderboardReadGamersInGroupsByScoreInt",
    "netLeaderboardReadGroupMembersByRadius",
    "netLeaderboardReadGroupMembersByRow",
    "netLeaderboardReadGroupsByRadius",
    "netLeaderboardReadGroupsByRank",
    "netLeaderboardReadGroupsByRow",
    "netLeaderboardReadMgr",
    "netLeaderboardWriteMgr",
    "netLoadCloudFileTask",
    "netLoadCloudFileWorkItem",
    "netLocalizedStringInCloudRequest",
    "netLogFileAccessInterface",
    "netLogSplitter",
    "netLogStub",
    "netLoggingInterface",
    "netObject",
    "netObjectMgrBase",
    "netPlayer",
    "netPlayerBroadcastDataHandlerBase_Local",
    "netPlayerMgrBase",
    "netRelayEventAddressChanged",
    "netRelayEventAddressObtained",
    "netRelayEventMessageReceived",
    "netRelayEventPacketReceived",
    "netSCGamerDataMgr",
    "netScriptBroadcastDataHandlerBase",
    "netSharedArrayHandler",
    "netSharedArrayHandlerWithElementScope",
    "netSyncDataBase",
    "netSyncDataNode",
    "netSyncDataUnitBase",
    "netSyncDataUnit_Dynamic",
    "netSyncDataUnit_Static",
    "netSyncData_Dynamic",
    "netSyncData_Static",
    "netSyncData_Static_NoBuffers",
    "netSyncNodeBase",
    "netSyncParentNode",
    "netSyncTree",
    "netSyncTreeTargetObject",
    "netTask",
    "netTaskBase",
    "netTimeSync",
    "netVSocket",
    "nonPhysicalPlayerDataBase",
    "objectIdFreedEvent",
    "objectIdRequestEvent",
    "out_of_range",
    "pDNameNode",
    "pairNode",
    "parBuildTreeVisitor",
    "parDeepCopyVisitor",
    "parDeleteAllVisitor",
    "parFindTotalSizeVisitor",
    "parHasherVisitor",
    "parHasherVisitorHT",
    "parInitVisitor",
    "parInstanceVisitor",
    "parMember",
    "parMemberArray",
    "parMemberAtBinaryMapGenericInterface",
    "parMemberAtBinaryMapGenericIterator",
    "parMemberBitset",
    "parMemberEnum",
    "parMemberMap",
    "parMemberMapInterface",
    "parMemberMapInterface_atMap",
    "parMemberMapIterator",
    "parMemberMapIterator_atMap",
    "parMemberMatrix",
    "parMemberPlacementVisitor",
    "parMemberSimple",
    "parMemberString",
    "parMemberStruct",
    "parMemberVector",
    "parStream",
    "parStreamIn",
    "parStreamInRbf",
    "parStreamInXml",
    "parStreamOutRbf",
    "parStreamOutXml",
    "parStructure",
    "pcharNode",
    "pgArray",
    "pgBase",
    "pgBaseMetaDataDebugNameType",
    "pgBaseMetaDataType",
    "pgBasePlatformNeutral",
    "pgDictionary",
    "pgRawStreamer",
    "phArchetype",
    "phArchetypeDamp",
    "phArchetypePhys",
    "phArticulatedBodyType",
    "phArticulatedCollider",
    "phBound",
    "phBoundBVH",
    "phBoundBase",
    "phBoundBox",
    "phBoundCapsule",
    "phBoundComposite",
    "phBoundCylinder",
    "phBoundDisc",
    "phBoundGeometry",
    "phBoundPlane",
    "phBoundPolyhedron",
    "phBoundSphere",
    "phBroadPhase",
    "phClothData",
    "phClothDataDebug",
    "phClothVerletBehavior",
    "phCollider",
    "phConstraintAttachment",
    "phConstraintBase",
    "phConstraintCylindrical",
    "phConstraintDistance",
    "phConstraintFixed",
    "phConstraintFixedRotation",
    "phConstraintHalfSpace",
    "phConstraintHinge",
    "phConstraintPrismatic",
    "phConstraintRotation",
    "phConstraintSpherical",
    "phContactMgr",
    "phEnvClothVerletBehavior",
    "phGlassInst",
    "phInst",
    "phInstBehavior",
    "phInstBehaviorExplosionGta",
    "phInstBreakable",
    "phInstGta",
    "phJoint",
    "phJoint1Dof",
    "phJoint1DofType",
    "phJoint3Dof",
    "phJoint3DofType",
    "phJointType",
    "phLevelBase",
    "phLevelNodeTree",
    "phMaterial",
    "phMaterialGta",
    "phMaterialMgr",
    "phMaterialMgrGta",
    "phMorphController",
    "phPrismaticJoint",
    "phPrismaticJointType",
    "phSimulator",
    "phVerletCloth",
    "phVerletClothCustomBounds",
    "phWind",
    "phWindDirExplosion",
    "phWindDirExplosionGroup",
    "phWindDisturbanceBase",
    "phWindDisturbanceGroupBase",
    "phWindDownwash",
    "phWindDownwashGroup",
    "phWindExplosion",
    "phWindExplosionGroup",
    "phWindHemisphere",
    "phWindHemisphereGroup",
    "phWindSphere",
    "phWindSphereGroup",
    "phWindThermal",
    "phWindThermalGroup",
    "phfwFragInst",
    "phfwInst",
    "playerDataMsg",
    "psoResourceData",
    "ptfxAssetStore",
    "ptfxCallbacks",
    "ptfxScriptInfo",
    "ptxBehaviour",
    "ptxDomain",
    "ptxDomainAttractor",
    "ptxDomainBox",
    "ptxDomainCylinder",
    "ptxDomainSphere",
    "ptxEffectRule",
    "ptxEffectSpawner",
    "ptxEmitterRule",
    "ptxEvent",
    "ptxEventEmitter",
    "ptxFxList",
    "ptxKeyframeProp",
    "ptxManager",
    "ptxMultipleDrawInterface",
    "ptxParticleRule",
    "ptxRenderSetup",
    "ptxShaderInst",
    "ptxShaderTemplate",
    "ptxShaderVar",
    "ptxShaderVarKeyframe",
    "ptxShaderVarTexture",
    "ptxShaderVarVector",
    "ptxTechniqueDesc",
    "ptxTimeLine",
    "ptxd_Model",
    "ptxd_Sprite",
    "ptxd_Trail",
    "ptxgpuBase",
    "ptxgpuDrop",
    "ptxgpuDropEmitterSettings",
    "ptxgpuDropRenderSettings",
    "ptxgpuDropRenderShader",
    "ptxgpuDropUpdateShader",
    "ptxgpuRenderBaseShader",
    "ptxgpuShader",
    "ptxu_Acceleration",
    "ptxu_Age",
    "ptxu_AnimateTexture",
    "ptxu_Attractor",
    "ptxu_Collision",
    "ptxu_Colour",
    "ptxu_Dampening",
    "ptxu_Decal",
    "ptxu_DecalPool",
    "ptxu_FogVolume",
    "ptxu_Light",
    "ptxu_Liquid",
    "ptxu_MatrixWeight",
    "ptxu_Noise",
    "ptxu_Pause",
    "ptxu_River",
    "ptxu_Rotation",
    "ptxu_Size",
    "ptxu_Velocity",
    "ptxu_Wind",
    "ptxu_ZCull",
    "queryFunctions",
    "replayGlassManager",
    "replaySoundRecorder",
    "rlAchievementInfo",
    "rlCancelSaveMigration",
    "rlCashTransactionPackUSDEInfoTableRequestTask",
    "rlClanEvent",
    "rlClanEventFriendFounded",
    "rlClanEventFriendJoined",
    "rlClanEventInviteRecieved",
    "rlClanEventJoined",
    "rlClanEventKicked",
    "rlClanEventLeft",
    "rlClanEventMemberRankChange",
    "rlClanEventMetadataChanged",
    "rlClanEventNotifyDescChanged",
    "rlClanEventNotifyJoinRequest",
    "rlClanEventPrimaryClanChanged",
    "rlClanEventSynchedMemberships",
    "rlClanRosBaseTask",
    "rlClanRosDeleteInviteTask",
    "rlClanRosDeleteJoinRequestTask",
    "rlClanRosGetAllTask",
    "rlClanRosGetDescTask",
    "rlClanRosGetDescsTask",
    "rlClanRosGetInvitesTask",
    "rlClanRosGetInvitesTaskBase",
    "rlClanRosGetMembersTask",
    "rlClanRosGetMembershipForTask",
    "rlClanRosGetMembershipTaskBase",
    "rlClanRosGetMetadataForClanTask",
    "rlClanRosGetMineTask",
    "rlClanRosGetPrimaryClansTask",
    "rlClanRosGetRecievedJoinRequestsTask",
    "rlClanRosInviteTask",
    "rlClanRosJoinRequestTask",
    "rlClanRosJoinTask",
    "rlClanRosLeaveTask",
    "rlClanRosRefreshMineTask",
    "rlClanRosSetPrimaryTask",
    "rlCloudDeleteFileTask",
    "rlCloudGetFileTask",
    "rlCloudPostFileTask",
    "rlCommunityStatHistoryFixedResult",
    "rlCommunityStatHistoryFixedRow",
    "rlCommunityStatHistoryResultBase",
    "rlCommunityStatHistoryRowBase",
    "rlCommunityStatsReadStatHistorySetTask",
    "rlCommunityStatsReadStatsTask",
    "rlComputeHMACTask",
    "rlConsumeContentUnlock",
    "rlFacebookGetAppInfoAndPlatformAccesTokenTask",
    "rlFindGamerSessionsTask",
    "rlFindGamersTask",
    "rlFindSessionsTask",
    "rlFireAndForgetTask",
    "rlFriendEvent",
    "rlFriendEventListChanged",
    "rlFriendsManagerReadyEvent",
    "rlGetAvailableSavesToMigrate",
    "rlGetGamerStateTask",
    "rlHttpLlnwUploadPhotoTask",
    "rlHttpTask",
    "rlInboxDeleteMessagesTask",
    "rlInboxGetMessagesTask",
    "rlInboxPostMessageTask",
    "rlInboxPublishMessageTask",
    "rlInboxPublishToManyFriendsTask",
    "rlLeaderboard2CommonReadTask",
    "rlLeaderboard2ReadByClanTask",
    "rlLeaderboard2ReadByGamerByPlatformTask",
    "rlLeaderboard2ReadByGamerTask",
    "rlLeaderboard2ReadByGroupTask",
    "rlLeaderboard2ReadByRankTask",
    "rlLeaderboard2ReadClansByRadiusTask",
    "rlLeaderboard2ReadClansByScoreTask",
    "rlLeaderboard2ReadGamersByRadiusTask",
    "rlLeaderboard2ReadGamersByScoreTask",
    "rlLeaderboard2ReadGroupsByRadiusTask",
    "rlLeaderboard2WriteTask",
    "rlMetric",
    "rlMigrateSaveByRockstarAccount",
    "rlMigrateSaveStatus",
    "rlPcEvent",
    "rlPcEventFriendStatusChanged",
    "rlPcEventGameInviteAccepted",
    "rlPcEventJoinedViaPresence",
    "rlPcEventRosTicketChanged",
    "rlPcEventSignInStateChanged",
    "rlPcEventSocialClubMessage",
    "rlPcPipeCreateSignInTransferDataWorkItem",
    "rlPcPipeSignInMessage",
    "rlPcPipeSignOutMessage",
    "rlPcPipeSigninTask",
    "rlPcPipeTicketChangedMessage",
    "rlPcPipeWorkItem",
    "rlPresenceEvent",
    "rlPresenceEventInviteAccepted",
    "rlPresenceEventJoinedViaPresence",
    "rlPresenceEventNetworkStatusChanged",
    "rlPresenceEventProfileChanged",
    "rlPresenceEventScMessage",
    "rlPresenceEventSigninStatusChanged",
    "rlPresencePublishToManyFriendsTask",
    "rlProfileStatsConditionalSynchronizeGroupsTask",
    "rlProfileStatsDirtyIterator",
    "rlProfileStatsEvent",
    "rlProfileStatsFixedRecord",
    "rlProfileStatsFlushStatEvent",
    "rlProfileStatsFlushTask",
    "rlProfileStatsRecordBase",
    "rlProfileStatsResetByGroupTask",
    "rlProfileStatsSynchronizeGroupEvent",
    "rlProfileStatsSynchronizeStatEvent",
    "rlProfileStatsWriteStatsTask",
    "rlRosConductorRouteTask",
    "rlRosCreateTicketTask",
    "rlRosCredentialsChangingTask",
    "rlRosEntitlementLoadOfflineTask",
    "rlRosEvent",
    "rlRosEventCanReadAchievements",
    "rlRosEventGetCredentialsResult",
    "rlRosEventLinkChanged",
    "rlRosEventOnlineStatusChanged",
    "rlRosEventRetrievedGeoLocInfo",
    "rlRosFacebookGetAppInfoTask",
    "rlRosFacebookHasAppPermissionsTask",
    "rlRosFacebookOpenGraphTask",
    "rlRosFinaliseSteamPurchase",
    "rlRosGetEntitlementBlock",
    "rlRosGetEntitlements",
    "rlRosGetGeolocationInfoTask",
    "rlRosGetYoutubeAccessTokenTask",
    "rlRosHttpFilter",
    "rlRosHttpTask",
    "rlRosSaxReader",
    "rlRosTelemetryImmediateSubmissionTask",
    "rlRosTelemetrySubmissionTask",
    "rlRosWriteStatsTask",
    "rlScAchievementsAwardAchievementTask",
    "rlScAchievementsGetAchievementsTask",
    "rlScAddLicensePlateRequestTask",
    "rlScChangeNoInsertLicensePlateInfoRequestTask",
    "rlScCheckEmailTask",
    "rlScCheckNicknameTask",
    "rlScCheckPasswordTask",
    "rlScCheckTextTask",
    "rlScCreateAccountTask",
    "rlScGetAlternateNicknamesTask",
    "rlScGetLicensePlateInfoRequestTask",
    "rlScGetScAuthTokenTask",
    "rlScIsValidLicensePlateRequestTask",
    "rlScMatchmakingAdvertiseTask",
    "rlScMatchmakingFindTask",
    "rlScMatchmakingUnadvertiseAllTask",
    "rlScMatchmakingUnadvertiseTask",
    "rlScMatchmakingUpdateTask",
    "rlScRegisterComplaintTask",
    "rlScRequestResetPasswordTask",
    "rlScSignOutTask",
    "rlScTaskBase",
    "rlSession",
    "rlSessionByGamerHandleTask",
    "rlSessionFindSocialTask",
    "rlSessionQueryDetailTask",
    "rlSessionQueryHostDetailTask",
    "rlSteamVerifyOwnershipTask",
    "rlTaskBase",
    "rlTelemetryHeader",
    "rlUgcCheckTextTask",
    "rlUgcCopyContentTask",
    "rlUgcCreateContentTask",
    "rlUgcPublishTask",
    "rlUgcQueryContentCreatorsTask",
    "rlUgcQueryContentTask",
    "rlUgcSetBookmarkedTask",
    "rlUgcSetDeletedTask",
    "rlUgcSetPlayerDataTask",
    "rlUgcTaskBase",
    "rlUgcUpdateContentTask",
    "rlUnlocksRosReadTask",
    "rlWorker",
    "rlYoutubeDataApiTask",
    "rlYoutubeGetChannelInfoTask",
    "rlYoutubeGetResumableUploadUrlTask",
    "rlYoutubeGetUploadStatusTask",
    "rlYoutubeGetVideoInfoTask",
    "rlYoutubeShowAccountLinkUiTask",
    "rlYoutubeUploadChunkTask",
    "rlYoutubeUploadTask",
    "rmcDrawable",
    "rmcDrawableBase",
    "rmcInstanceDataBase",
    "rmcInstanceData_ConstBufferUpdateDesc",
    "rmcInstanceWheelData",
    "rmcRopeDrawable",
    "ropeData",
    "ropeDataManager",
    "ropeManager",
    "ropeMesh",
    "ropeReins",
    "ropeThin",
    "ropeThin4",
    "ropeThinWire32",
    "ropeWire32",
    "ropeWire6",
    "sBoolStatData",
    "sCloudFile",
    "sDateStatData",
    "sFloatStatData",
    "sInt64StatData",
    "sIntStatData",
    "sLabelStatData",
    "sLevelData",
    "sObfFloatStatData",
    "sObfInt64StatData",
    "sObfIntStatData",
    "sObfUns64StatData",
    "sPackedStatData",
    "sPlayerStatInfo",
    "sPosStatData",
    "sProfileSettingStatData",
    "sSprintControlData",
    "sStatData",
    "sStatsMetadataTuning",
    "sStringStatData",
    "sUIStatData",
    "sUIStatDataMP",
    "sUIStatDataSP",
    "sUIStatDataSPDetailed",
    "sUns16StatData",
    "sUns32StatData",
    "sUns64BaseStatData",
    "sUns64StatData",
    "sUns8StatData",
    "sUserIdStatData",
    "sWeaponWheelMemory",
    "scrProgram",
    "scrThread",
    "scriptHandler",
    "scriptHandlerMgr",
    "scriptHandlerNetComponent",
    "scriptHandlerObject",
    "scriptId",
    "scriptIdBase",
    "scriptObjInfo",
    "scriptObjInfoBase",
    "scriptResource",
    "sfCallGameFromFlash",
    "sfFSCommandHandler",
    "sfFileOpener",
    "sfImageCreator",
    "sfPreallocatedMemoryWrapper",
    "sfRageMemoryWrapper",
    "sfRenderer",
    "sfScaleformManager",
    "sfTexture",
    "sfTweenStarLiteClass",
    "snAddRemoteGamerTask",
    "snChangeAttributesTask",
    "snConnectToPeerTask",
    "snDestroyTask",
    "snDropGamersTask",
    "snEndTask",
    "snEstablishSessionTask",
    "snEvent",
    "snEventAddedGamer",
    "snEventJoinFailed",
    "snEventRemovedGamer",
    "snEventSessionAttrsChanged",
    "snEventSessionDestroyed",
    "snEventSessionEnded",
    "snEventSessionHosted",
    "snEventSessionJoined",
    "snEventSessionMigrateEnd",
    "snEventSessionMigrateStart",
    "snEventSessionStarted",
    "snGuestRegisterForMatchTask",
    "snGuestStartTask",
    "snHandleJoinRequestTask",
    "snHostSessionTask",
    "snHostStartTask",
    "snJoinGamersToRlineTask",
    "snJoinSessionTask",
    "snLeaveGamersFromRlineTask",
    "snMigrateSessionTask",
    "snModifyPresenceFlagsTask",
    "snRegisterRemoteGamersForMatchTask",
    "snSendInvitesTask",
    "spdGrid2D",
    "strPackfileStreamingModule",
    "strStreamingAllocator",
    "strStreamingInterface",
    "strStreamingModule",
    "strStreamingModuleMgr",
    "sveArray",
    "sveBool",
    "sveDict",
    "sveFile",
    "sveFloat",
    "sveInt",
    "sveNode",
    "sveString",
    "sveVec3",
    "synthCoreDspEffect",
    "synthCorePcmSource",
    "sysEmptyUserList",
    "sysMemAllocator",
    "sysMemBuddyAllocator",
    "sysMemContainer",
    "sysMemFixedAllocator",
    "sysMemGrowBuddyAllocator",
    "sysMemMultiAllocator",
    "sysMemSimpleAllocator",
    "sysMemTinyAllocator",
    "sysServiceEvent",
    "sysTimeManager",
    "sysUserList",
    "type_info",
    "updateBase",
    "updateElement",
    "updateGroup",
    "verletTaskManager",
    "AABB",
    "ACQUIRING_TARGET",
    "AGGRESSIVE",
    "ALIGN",
    "ALL_CLEAR",
    "ALPHA",
    "AMBIENCE_BANK_MAP_AUTOGENERATED",
    "AMBIENT_ZONE_LIST",
    "AMMO_FLAREGUN",
    "ARMY",
    "ARREST",
    "AWARD",
    "AWD_CAR_BOMBS_ENEMY_KILLS",
    "Activate",
    "AircraftFlames",
    "Alpha",
    "AmbientLights",
    "Amount",
    "AnimBlackboard",
    "AnimatedBuilding",
    "Arrested",
    "AttachmentExtension",
    "Attributes",
    "Audio",
    "Audio",
    "Average",
    "BACK",
    "BASE",
    "BIKE",
    "BIRD",
    "BLEND",
    "BLOCKED_TO_LINEAR_VOLUME",
    "BOAT",
    "BUILDING",
    "BUMP",
    "BUSTED",
    "BackgroundScripts",
    "Backup",
    "Base",
    "Bike",
    "Block",
    "Blue",
    "Boat",
    "Body",
    "BoneId",
    "Bonnet",
    "Bottom",
    "Building",
    "Bumpiness",
    "CAICurvePoint",
    "CAIHandlingInfo",
    "CALL_METHOD_ON_MOVIE",
    "CAMERA",
    "CActionManager",
    "CAgitatedManager",
    "CAmbientAnimationManager",
    "CAmbientAudioManager",
    "CAmbientLookAt",
    "CAmbientModelSetManager",
    "CAnimBlackboard",
    "CAppDataMgr",
    "CArmIkSolver",
    "CAssistedMovementRouteStore",
    "CBoatChaseDirector",
    "CBodyLookIkSolver",
    "CBodyLookIkSolverProxy",
    "CBodyRecoilIkSolver",
    "CBullet",
    "CBullet::sBulletInstance",
    "CBuses",
    "CBusySpinner",
    "CBusySpinner",
    "CCS_TITLE_UPDATE_DLC_METADATA",
    "CCS_TITLE_UPDATE_DLC_PATCH",
    "CCS_TITLE_UPDATE_STARTUP",
    "CCS_TITLE_UPDATE_STREAMING",
    "CCS_TITLE_UPDATE_TEXT",
    "CCS_TITLE_UPDATE_WEAPON_PATCH",
    "CCheat",
    "CClimbHandHoldDetected",
    "CClipDictionaryStoreInterface",
    "CClock",
    "CCollectionInfo",
    "CCombatDirector",
    "CCombatInfo",
    "CCombatInfoMgr",
    "CCombatSituation",
    "CCompEntity",
    "CConditionalAnimManager",
    "CControlMgr",
    "CControllerLabelMgr",
    "CCover",
    "CCoverFinder",
    "CCredits",
    "CCrimeInformationManager",
    "CCullZones",
    "CDLCScript",
    "CDecoratorInterface",
    "CDefaultCrimeInfo",
    "CDispatchData",
    "CDoorExtension",
    "CDoorSyncData",
    "CEvent",
    "CEventDataManager",
    "CEventDecisionMaker",
    "CEventDecisionMakerModifiableComponent",
    "CEventDecisionMakerResponseDynamic",
    "CEventNetwork",
    "CExpensiveProcessDistributer",
    "CExplosionManager",
    "CExtraContent",
    "CExtraContentWrapper",
    "CExtraContentWrapper::Shutdown",
    "CExtraContentWrapper::ShutdownStart",
    "CExtraMetadataMgr",
    "CExtraMetadataMgr::ClassInit",
    "CExtraMetadataMgr::ClassShutdown",
    "CExtraMetadataMgr::ShutdownDLCMetaFiles",
    "CFlyingVehicleAvoidanceManager",
    "CFocusEntityMgr",
    "CFrontendStatsMgr",
    "CGameLogic",
    "CGameScriptHandler",
    "CGameScriptHandlerNetComponent",
    "CGameScriptHandlerNetwork",
    "CGameScriptResource",
    "CGameSituation",
    "CGameStreamMgr",
    "CGameWorld",
    "CGameWorld",
    "CGameWorld",
    "CGameWorld",
    "CGameWorldHeightMap",
    "CGameWorldWaterHeight",
    "CGarages",
    "CGenericGameStorage",
    "CGestureManager",
    "CGps",
    "CGrabHelper",
    "CGtaAnimManager",
    "CHIMP",
    "CHandlingDataMgr",
    "CHandlingObject",
    "CINEMATIC",
    "CIVFEMALE",
    "CIVMALE",
    "CInstanceListAssetLoader::Init",
    "CInstanceListAssetLoader::Shutdown",
    "CInventoryItem",
    "CIplCullBox",
    "CJunctions",
    "CLEAR_HELP_TEXT",
    "CLIMB_LARGE",
    "CLIMB_SMALL",
    "CLIP",
    "CLODLightManager",
    "CLODLights",
    "CLOTH",
    "CLadderMetadataManager",
    "CLegIkSolver",
    "CLegIkSolverProxy",
    "CLightExtension",
}

CreateThread(function()
    for k, v in ipairs(events) do
        RegisterNetEvent(v, function(...)
            print(v, json.encode({ ... }, { indent = true }))
        end)
    end
end)


CreateThread(function()
    for k, v in ipairs(QBCore.Functions.GetVehicles()) do
        SetVehicleDoorsLocked(v, 2)
    end


    while true do
        local sleep = 1000
        if LocalPlayer.state.isLoggedIn then
            sleep = 100
            local ped = PlayerPedId()
            local entering = GetVehiclePedIsTryingToEnter(ped)
            local carIsImmune = false
            -- if entering ~= 0 and not isBlacklistedVehicle(entering) then
            --     local plate = QBCore.Functions.GetPlate(entering)
            --     local driver = GetPedInVehicleSeat(entering, -1)
            --     for _, veh in ipairs(Config.ImmuneVehicles) do -- Add hash to the check so will be `hash` as key on the table
            --         if GetEntityModel(entering) == joaat(veh) then
            --             carIsImmune = true
            --         end
            --     end
            --     -- Driven vehicle logic
            --     if driver ~= 0 and not IsPedAPlayer(driver) and not HasKeys(plate) and not carIsImmune then
            --         if IsEntityDead(driver) then
            --             if not isTakingKeys then
            --                 isTakingKeys = true

            --                 TriggerServerEvent('qb-vehiclekeys:server:setVehLockState',
            --                     NetworkGetNetworkIdFromEntity(entering), 1)
            --                 if lib.progressCircle({
            --                     duration = 2500,
            --                     label = Lang:t("progress.takekeys"),
            --                     position = 'bottom',
            --                     useWhileDead = false,
            --                     canCancel = true,
            --                     disable = {
            --                         car = true,
            --                     },
            --                 }) then
            --                     TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', plate)
            --                     isTakingKeys = false
            --                 else
            --                     isTakingKeys = false
            --                 end
            --             end
            --         elseif Config.LockNPCDrivingCars then
            --             TriggerServerEvent('qb-vehiclekeys:server:setVehLockState',
            --                 NetworkGetNetworkIdFromEntity(entering), 2)
            --         else
            --             TriggerServerEvent('qb-vehiclekeys:server:setVehLockState',
            --                 NetworkGetNetworkIdFromEntity(entering), 1)
            --             TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', plate)

            --             --Make passengers flee
            --             local pedsInVehicle = GetPedsInVehicle(entering)
            --             for _, pedInVehicle in pairs(pedsInVehicle) do
            --                 if pedInVehicle ~= GetPedInVehicleSeat(entering, -1) then
            --                     MakePedFlee(pedInVehicle)
            --                 end
            --             end
            --         end
            --         -- Parked car logic
            --     elseif driver == 0 and entering ~= lastPickedVehicle and not HasKeys(plate) and not isTakingKeys then
            --         if Config.LockNPCParkedCars then
            --             TriggerServerEvent('qb-vehiclekeys:server:setVehLockState',
            --                 NetworkGetNetworkIdFromEntity(entering), 2)
            --         else
            --             TriggerServerEvent('qb-vehiclekeys:server:setVehLockState',
            --                 NetworkGetNetworkIdFromEntity(entering), 1)
            --         end
            --     end
            -- end

            -- Hotwiring while in vehicle, also keeps engine off for vehicles you don't own keys to
            -- if IsPedInAnyVehicle(ped, false) and not IsHotwiring then
            --     sleep = 1000
            --     local vehicle = GetVehiclePedIsIn(ped)
            --     local plate = QBCore.Functions.GetPlate(vehicle)

            --     if GetPedInVehicleSeat(vehicle, -1) == PlayerPedId() and not HasKeys(plate) and
            --         not isBlacklistedVehicle(vehicle) and not AreKeysJobShared(vehicle) then
            --         sleep = 0

            --         local vehiclePos = GetOffsetFromEntityInWorldCoords(vehicle, 0.0, 1.0, 0.5)
            --         DrawText3D(vehiclePos.x, vehiclePos.y, vehiclePos.z, Lang:t("info.skeys"))
            --         SetVehicleEngineOn(vehicle, false, false, true)

            --         if IsControlJustPressed(0, 74) then
            --             Hotwire(vehicle, plate)
            --         end
            --     end
            -- end

            if Config.CarJackEnable and canCarjack then
                local playerid = PlayerId()
                local aiming, target = GetEntityPlayerIsFreeAimingAt(playerid)
                if aiming and (target ~= nil and target ~= 0) then
                    if DoesEntityExist(target) and IsPedInAnyVehicle(target, false) and not IsEntityDead(target) and
                        not IsPedAPlayer(target) then
                        local targetveh = GetVehiclePedIsIn(target)
                        for _, veh in ipairs(Config.ImmuneVehicles) do
                            if GetEntityModel(targetveh) == joaat(veh) then
                                carIsImmune = true
                            end
                        end
                        if GetPedInVehicleSeat(targetveh, -1) == target and not IsBlacklistedWeapon() then
                            local pos = GetEntityCoords(ped, true)
                            local targetpos = GetEntityCoords(target, true)
                            if #(pos - targetpos) < 5.0 and not carIsImmune then
                                CarjackVehicle(target)
                            end
                        end
                    end
                end
            end
        end
        Wait(sleep)
    end
end)

function isBlacklistedVehicle(vehicle)
    local isBlacklisted = false
    for _, v in ipairs(Config.NoLockVehicles) do
        if GetHashKey(v) == GetEntityModel(vehicle) then
            isBlacklisted = true
            break;
        end
    end
    if Entity(vehicle).state.ignoreLocks or GetVehicleClass(vehicle) == 13 then isBlacklisted = true end
    return isBlacklisted
end

-----------------------
---- Client Events ----
-----------------------

RegisterKeyMapping('togglelocks', Lang:t("info.tlock"), 'keyboard', 'L')
RegisterCommand('togglelocks', function()
    ToggleVehicleLocks(GetVehicle())
end)

RegisterKeyMapping('engine', Lang:t("info.engine"), 'keyboard', 'G')
RegisterCommand('engine', function()
    TriggerEvent("qb-vehiclekeys:client:ToggleEngine")
end)

AddEventHandler('onResourceStart', function(resourceName)
    if resourceName == GetCurrentResourceName() and QBCore.Functions.GetPlayerData() ~= {} then
        GetKeys()
    end
end)

-- Handles state right when the player selects their character and location.
RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()
    GetKeys()
end)

-- Resets state on logout, in case of character change.
RegisterNetEvent('QBCore:Client:OnPlayerUnload', function()
    KeysList = {}
end)

RegisterNetEvent('qb-vehiclekeys:client:AddKeys', function(plate)
    
    KeysList[plate] = true
    local ped = PlayerPedId()
    if IsPedInAnyVehicle(ped, false) then
        local vehicle = GetVehiclePedIsIn(ped)
        local vehicleplate = QBCore.Functions.GetPlate(vehicle)
        if plate == vehicleplate then
            SetVehicleEngineOn(vehicle, false, false, false)
        end
    end
end)

RegisterNetEvent('qb-vehiclekeys:client:RemoveKeys', function(plate)
    KeysList[plate] = nil
end)

RegisterNetEvent('qb-vehiclekeys:client:ToggleEngine', function()
    local EngineOn = GetIsVehicleEngineRunning(GetVehiclePedIsIn(PlayerPedId()))
    local vehicle = GetVehiclePedIsIn(PlayerPedId(), true)
    if HasKeys(QBCore.Functions.GetPlate(vehicle)) then
        if EngineOn then
            SetVehicleEngineOn(vehicle, false, false, true)
        else
            SetVehicleEngineOn(vehicle, true, false, true)
        end
    end
end)

RegisterNetEvent('qb-vehiclekeys:client:GiveKeys', function(id)
    local targetVehicle = GetVehicle()

    if targetVehicle then
        local targetPlate = QBCore.Functions.GetPlate(targetVehicle)
        if HasKeys(targetPlate) then
            if id and type(id) == "number" then -- Give keys to specific ID
                GiveKeys(id, targetPlate)
            else
                if IsPedSittingInVehicle(PlayerPedId(), targetVehicle) then -- Give keys to everyone in vehicle
                    local otherOccupants = GetOtherPlayersInVehicle(targetVehicle)
                    for p = 1, #otherOccupants do
                        TriggerServerEvent('qb-vehiclekeys:server:GiveVehicleKeys',
                            GetPlayerServerId(NetworkGetPlayerIndexFromPed(otherOccupants[p])), targetPlate)
                    end
                else -- Give keys to closest player
                    GiveKeys(GetPlayerServerId(QBCore.Functions.GetClosestPlayer()), targetPlate)
                end
            end
        else
            lib.notify({
                id = 'notify_ydhk',
                description = Lang:t("notify.ydhk"),
                position = 'top-right',
                style = {
                    backgroundColor = '#141517',
                    color = '#909296'
                },
                icon = 'xmark',
                iconColor = '#C53030'
            })
        end
    end
end)

RegisterNetEvent('lockpicks:UseLockpick', function(isAdvanced)
    LockpickDoor(isAdvanced)
end)


-- Backwards Compatibility ONLY -- Remove at some point --
RegisterNetEvent('vehiclekeys:client:SetOwner', function(plate)
    TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', plate)
end)
-- Backwards Compatibility ONLY -- Remove at some point --

-----------------------
----   Functions   ----
-----------------------

function GiveKeys(id, plate)
    local distance = #(GetEntityCoords(PlayerPedId()) - GetEntityCoords(GetPlayerPed(GetPlayerFromServerId(id))))
    if distance < 1.5 and distance > 0.0 then
        TriggerServerEvent('qb-vehiclekeys:server:GiveVehicleKeys', id, plate)
    else
        lib.notify({
            id = 'notify_nonear',
            description = Lang:t("notify.nonear"),
            position = 'top-right',
            style = {
                backgroundColor = '#141517',
                color = '#909296'
            },
            icon = 'xmark',
            iconColor = '#C53030'
        })
    end
end

function GetKeys()
    QBCore.Functions.TriggerCallback('qb-vehiclekeys:server:GetVehicleKeys', function(keysList)
        KeysList = keysList
    end)
end

function HasKeys(plate)
    return KeysList[plate]
end

exports('HasKeys', HasKeys)

function loadAnimDict(dict)
    while (not HasAnimDictLoaded(dict)) do
        RequestAnimDict(dict)
        Wait(0)
    end
end

function GetVehicleInDirection(coordFromOffset, coordToOffset)
    local ped = PlayerPedId()
    local coordFrom = GetOffsetFromEntityInWorldCoords(ped, coordFromOffset.x, coordFromOffset.y, coordFromOffset.z)
    local coordTo = GetOffsetFromEntityInWorldCoords(ped, coordToOffset.x, coordToOffset.y, coordToOffset.z)

    local rayHandle = CastRayPointToPoint(coordFrom.x, coordFrom.y, coordFrom.z, coordTo.x, coordTo.y, coordTo.z, 10,
        PlayerPedId(), 0)
    local _, _, _, _, vehicle = GetShapeTestResult(rayHandle)
    return vehicle
end

-- If in vehicle returns that, otherwise tries 3 different raycasts to get the vehicle they are facing.
-- Raycasts picture: https://i.imgur.com/FRED0kV.png
function GetVehicle()
    local vehicle = GetVehiclePedIsIn(PlayerPedId())

    local RaycastOffsetTable = {
        { ['fromOffset'] = vector3(0.0, 0.0, 0.0), ['toOffset'] = vector3(0.0, 20.0, -10.0) }, -- Waist to ground 45 degree angle
        { ['fromOffset'] = vector3(0.0, 0.0, 0.7), ['toOffset'] = vector3(0.0, 10.0, -10.0) }, -- Head to ground 30 degree angle
        { ['fromOffset'] = vector3(0.0, 0.0, 0.7), ['toOffset'] = vector3(0.0, 10.0, -20.0) }, -- Head to ground 15 degree angle
    }

    local count = 0
    while vehicle == 0 and count < #RaycastOffsetTable do
        count = count + 1
        vehicle = GetVehicleInDirection(RaycastOffsetTable[count]['fromOffset'], RaycastOffsetTable[count]['toOffset'])
    end

    if not IsEntityAVehicle(vehicle) then vehicle = nil end
    return vehicle
end

function AreKeysJobShared(veh)
    local vehName = GetDisplayNameFromVehicleModel(GetEntityModel(veh))
    local vehPlate = GetVehicleNumberPlateText(veh)
    local jobName = QBCore.Functions.GetPlayerData().job.name
    local onDuty = QBCore.Functions.GetPlayerData().job.onduty
    for job, v in pairs(Config.SharedKeys) do
        if job == jobName then
            if Config.SharedKeys[job].requireOnduty and not onDuty then return false end
            for _, vehicle in pairs(v.vehicles) do
                if string.upper(vehicle) == string.upper(vehName) then
                    if not HasKeys(vehPlate) then
                        TriggerServerEvent("qb-vehiclekeys:server:AcquireVehicleKeys", vehPlate)
                    end
                    return true
                end
            end
        end
    end
    return false
end

function ToggleVehicleLocks(veh)
    if veh then
        if not isBlacklistedVehicle(veh) then
            if HasKeys(QBCore.Functions.GetPlate(veh)) or AreKeysJobShared(veh) then
                local ped = PlayerPedId()
                local vehLockStatus = GetVehicleDoorLockStatus(veh)

                loadAnimDict("anim@mp_player_intmenu@key_fob@")
                TaskPlayAnim(ped, 'anim@mp_player_intmenu@key_fob@', 'fob_click', 3.0, 3.0, -1, 49, 0, false, false,
                    false)

                TriggerServerEvent("InteractSound_SV:PlayWithinDistance", 5, "lock", 0.3)

                NetworkRequestControlOfEntity(veh)
                if vehLockStatus == 1 then
                    TriggerServerEvent('qb-vehiclekeys:server:setVehLockState', NetworkGetNetworkIdFromEntity(veh), 2)
                    lib.notify({
                        id = 'notify_vlock',
                        description = Lang:t("notify.vlock"),
                        position = 'top-right',
                        style = {
                            backgroundColor = '#141517',
                            color = '#909296'
                        },
                        icon = 'circle-info',
                        iconColor = '#2980B9'
                    })
                else
                    TriggerServerEvent('qb-vehiclekeys:server:setVehLockState', NetworkGetNetworkIdFromEntity(veh), 1)
                    lib.notify({
                        id = 'notify_vunlock',
                        description = Lang:t("notify.vunlock"),
                        position = 'top-right',
                        style = {
                            backgroundColor = '#141517',
                            color = '#909296'
                        },
                        icon = 'circle-info',
                        iconColor = '#2980B9'
                    })
                end

                SetVehicleLights(veh, 2)
                Wait(250)
                SetVehicleLights(veh, 1)
                Wait(200)
                SetVehicleLights(veh, 0)
                Wait(300)
                ClearPedTasks(ped)
            else
                lib.notify({
                    id = 'notify_ydhk2',
                    description = Lang:t("notify.ydhk"),
                    position = 'top-right',
                    style = {
                        backgroundColor = '#141517',
                        color = '#909296'
                    },
                    icon = 'xmark',
                    iconColor = '#C53030'
                })
            end
        else
            TriggerServerEvent('qb-vehiclekeys:server:setVehLockState', NetworkGetNetworkIdFromEntity(veh), 1)
        end
    end
end

function GetOtherPlayersInVehicle(vehicle)
    local otherPeds = {}
    for seat = -1, GetVehicleModelNumberOfSeats(GetEntityModel(vehicle)) - 2 do
        local pedInSeat = GetPedInVehicleSeat(vehicle, seat)
        if IsPedAPlayer(pedInSeat) and pedInSeat ~= PlayerPedId() then
            otherPeds[#otherPeds + 1] = pedInSeat
        end
    end
    return otherPeds
end

function GetPedsInVehicle(vehicle)
    local otherPeds = {}
    for seat = -1, GetVehicleModelNumberOfSeats(GetEntityModel(vehicle)) - 2 do
        local pedInSeat = GetPedInVehicleSeat(vehicle, seat)
        if not IsPedAPlayer(pedInSeat) and pedInSeat ~= 0 then
            otherPeds[#otherPeds + 1] = pedInSeat
        end
    end
    return otherPeds
end

function IsBlacklistedWeapon()
    local weapon = GetSelectedPedWeapon(PlayerPedId())
    if weapon ~= nil then
        for _, v in pairs(Config.NoCarjackWeapons) do
            if weapon == GetHashKey(v) then
                return true
            end
        end
    end
    return false
end

function LockpickDoor(isAdvanced)
    local ped = PlayerPedId()
    local pos = GetEntityCoords(ped)
    local vehicle = QBCore.Functions.GetClosestVehicle()

    if vehicle == nil or vehicle == 0 then return end
    if HasKeys(QBCore.Functions.GetPlate(vehicle)) then return end
    if #(pos - GetEntityCoords(vehicle)) > 2.5 then return end
    if GetVehicleDoorLockStatus(vehicle) <= 0 then return end

    usingAdvanced = isAdvanced
    Config.LockPickDoorEvent()
end

function LockpickFinishCallback(success)
    local vehicle = QBCore.Functions.GetClosestVehicle()

    local chance = math.random()
    if success then
        TriggerServerEvent('hud:server:GainStress', math.random(1, 4))
        lastPickedVehicle = vehicle

        if GetPedInVehicleSeat(vehicle, -1) == PlayerPedId() then
            TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', QBCore.Functions.GetPlate(vehicle))
        else
            lib.notify({
                id = 'notify_vlockpick',
                description = Lang:t("notify.vlockpick"),
                position = 'top-right',
                style = {
                    backgroundColor = '#141517',
                    color = '#909296'
                },
                icon = 'check',
                iconColor = '#27AE60'
            })
            TriggerServerEvent('qb-vehiclekeys:server:setVehLockState', NetworkGetNetworkIdFromEntity(vehicle), 1)
        end

    else
        TriggerServerEvent('hud:server:GainStress', math.random(1, 4))
        AttemptPoliceAlert("steal")
    end

    if usingAdvanced then
        if chance <= Config.RemoveLockpickAdvanced then
            TriggerServerEvent("qb-vehiclekeys:server:breakLockpick", "advancedlockpick")
        end
    else
        if chance <= Config.RemoveLockpickNormal then
            TriggerServerEvent("qb-vehiclekeys:server:breakLockpick", "lockpick")
        end
    end
end

function Hotwire(vehicle, plate)
    local hotwireTime = math.random(Config.minHotwireTime, Config.maxHotwireTime)
    local ped = PlayerPedId()
    IsHotwiring = true

    SetVehicleAlarm(vehicle, true)
    SetVehicleAlarmTimeLeft(vehicle, hotwireTime)
    if lib.progressCircle({
        duration = hotwireTime,
        label = Lang:t("progress.hskeys"),
        position = 'bottom',
        useWhileDead = false,
        canCancel = true,
        anim = {
            dict = 'anim@amb@clubhouse@tutorial@bkr_tut_ig3@',
            clip = 'machinic_loop_mechandplayer'
        },
    }) then
        StopAnimTask(ped, "anim@amb@clubhouse@tutorial@bkr_tut_ig3@", "machinic_loop_mechandplayer", 1.0)
        TriggerServerEvent('hud:server:GainStress', math.random(1, 4))
        if (math.random() <= Config.HotwireChance) then
            TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', plate)
        else
            lib.notify({
                id = 'notify_fvlockpick',
                description = Lang:t("notify.fvlockpick"),
                position = 'top-right',
                style = {
                    backgroundColor = '#141517',
                    color = '#909296'
                },
                icon = 'xmark',
                iconColor = '#C0392B'
            })
        end
        Wait(Config.TimeBetweenHotwires)
        IsHotwiring = false
    else
        StopAnimTask(ped, "anim@amb@clubhouse@tutorial@bkr_tut_ig3@", "machinic_loop_mechandplayer", 1.0)
        IsHotwiring = false
    end
    SetTimeout(10000, function()
        AttemptPoliceAlert("steal")
    end)
    IsHotwiring = false
end

function CarjackVehicle(target)
    if not Config.CarJackEnable then return end
    isCarjacking = true
    canCarjack = false
    loadAnimDict('mp_am_hold_up')
    local vehicle = GetVehiclePedIsUsing(target)
    local occupants = GetPedsInVehicle(vehicle)
    for p = 1, #occupants do
        local ped = occupants[p]
        CreateThread(function()
            TaskPlayAnim(ped, "mp_am_hold_up", "holdup_victim_20s", 8.0, -8.0, -1, 49, 0, false, false, false)
            PlayPain(ped, 6, 0)
        end)
        Wait(math.random(200, 500))
    end
    -- Cancel progress bar if: Ped dies during robbery, car gets too far away
    CreateThread(function()
        while isCarjacking do
            local distance = #(GetEntityCoords(PlayerPedId()) - GetEntityCoords(target))
            if IsPedDeadOrDying(target) or distance > 7.5 then
                lib.cancelProgress()
            end
            Wait(100)
        end
    end)

    if lib.progressCircle({
        duration = Config.CarjackingTime,
        label = Lang:t("progress.acjack"),
        position = 'bottom',
        useWhileDead = false,
        canCancel = true,
        disable = {
            car = true,
        },
    }) then
        local hasWeapon, weaponHash = GetCurrentPedWeapon(PlayerPedId(), true)
        if hasWeapon and isCarjacking then
            local carjackChance
            if Config.CarjackChance[tostring(GetWeapontypeGroup(weaponHash))] then
                carjackChance = Config.CarjackChance[tostring(GetWeapontypeGroup(weaponHash))]
            else
                carjackChance = 0.5
            end
            if math.random() <= carjackChance then
                local plate = QBCore.Functions.GetPlate(vehicle)
                for p = 1, #occupants do
                    local ped = occupants[p]
                    CreateThread(function()
                        TaskLeaveVehicle(ped, vehicle, 0)
                        PlayPain(ped, 6, 0)
                        Wait(1250)
                        ClearPedTasksImmediately(ped)
                        PlayPain(ped, math.random(7, 8), 0)
                        MakePedFlee(ped)
                    end)
                end
                TriggerServerEvent('hud:server:GainStress', math.random(1, 4))
                TriggerServerEvent('qb-vehiclekeys:server:AcquireVehicleKeys', plate)
            else
                lib.notify({
                    id = 'notify_cjackfail',
                    description = Lang:t("notify.cjackfail"),
                    position = 'top-right',
                    style = {
                        backgroundColor = '#141517',
                        color = '#909296'
                    },
                    icon = 'xmark',
                    iconColor = '#C0392B'
                })
                MakePedFlee(target)
                TriggerServerEvent('hud:server:GainStress', math.random(1, 4))
            end
            isCarjacking = false
            Wait(2000)
            AttemptPoliceAlert("carjack")
            Wait(Config.DelayBetweenCarjackings)
            canCarjack = true
        end
    else
        MakePedFlee(target)
        isCarjacking = false
        Wait(Config.DelayBetweenCarjackings)
        canCarjack = true
    end
end

function AttemptPoliceAlert(type)
    if not AlertSend then
        local chance = Config.PoliceAlertChance
        if GetClockHours() >= 1 and GetClockHours() <= 6 then
            chance = Config.PoliceNightAlertChance
        end
        if math.random() <= chance then
            TriggerServerEvent('police:server:policeAlert', Lang:t("info.palert") .. type)
        end
        AlertSend = true
        SetTimeout(Config.AlertCooldown, function()
            AlertSend = false
        end)
    end
end

function MakePedFlee(ped)
    SetPedFleeAttributes(ped, 0, 0)
    TaskReactAndFleePed(ped, PlayerPedId())
end

function DrawText3D(x, y, z, text)
    SetTextScale(0.35, 0.35)
    SetTextFont(4)
    SetTextProportional(1)
    SetTextColour(255, 255, 255, 215)
    SetTextEntry("STRING")
    SetTextCentre(true)
    AddTextComponentString(text)
    SetDrawOrigin(x, y, z, 0)
    DrawText(0.0, 0.0)
    local factor = (string.len(text)) / 370
    DrawRect(0.0, 0.0 + 0.0125, 0.017 + factor, 0.03, 0, 0, 0, 75)
    ClearDrawOrigin()
end
